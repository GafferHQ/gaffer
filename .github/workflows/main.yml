name: CI

on:
  push:
    branches:
      - main
      - '*_maintenance'
  pull_request:
    branches:
      - main
      - '*_maintenance'
  release:
      types: [published]

jobs:

  build:

    strategy:

      # Don't cancel other jobs in the build matrix if one job fails.
      fail-fast: false

      matrix:

        # Rather than generate all permutations of various settings,
        # we want to explicitly list each of the variants we want to
        # test. We can use `name` to declare the names of our variants,
        # and then use `include` to define their settings.

        name: [
          linux-python2,
          linux-python2-debug,
          linux-python3,
          macos-python2,
          windows-python3,
        ]

        include:

          - name: linux-python2
            os: ubuntu-20.04
            buildType: RELEASE
            publish: true
            containerImage: ghcr.io/gafferhq/build/build:2.0.0
            dependenciesURL: https://github.com/ImageEngine/cortex/releases/download/10.3.2.1/cortex-10.3.2.1-linux-python2.tar.gz
            # GitHub container builds run as root. This causes failures for tests that
            # assert that filesystem permissions are respected, because root doesn't
            # respect permissions. So we run the final test suite as a dedicated
            # test user rather than as root.
            testRunner: su testUser -c
            sconsCacheMegabytes: 400

          - name: linux-python2-debug
            os: ubuntu-20.04
            buildType: DEBUG
            publish: false
            containerImage: ghcr.io/gafferhq/build/build:2.0.0
            dependenciesURL: https://github.com/ImageEngine/cortex/releases/download/10.3.2.1/cortex-10.3.2.1-linux-python2.tar.gz
            testRunner: su testUser -c
            # Debug builds are ludicrously big, so we must use a larger cache
            # limit. In practice this compresses down to 4-500Mb.
            sconsCacheMegabytes: 2500

          - name: linux-python3
            os: ubuntu-20.04
            buildType: RELEASE
            publish: true
            containerImage: ghcr.io/gafferhq/build/build:2.0.0
            dependenciesURL: https://github.com/ImageEngine/cortex/releases/download/10.3.2.1/cortex-10.3.2.1-linux-python3.tar.gz
            testRunner: su testUser -c
            sconsCacheMegabytes: 400

          - name: macos-python2
            os: macos-10.15
            buildType: RELEASE
            publish: true
            containerImage:
            dependenciesURL: https://github.com/ImageEngine/cortex/releases/download/10.3.2.1/cortex-10.3.2.1-macos-python2.tar.gz
            testRunner: bash -c
            sconsCacheMegabytes: 400

          - name: windows-python3
            os: windows-2016
            buildType: RELEASE
            variant: windows-python3
            publish: false
            containerImage:
            dependenciesURL: https://github.com/hypothetical-inc/gafferDependencies/releases/download/5.0.0/gafferDependencies-5.0.0-Python3-windows.zip

    runs-on: ${{ matrix.os }}

    container: ${{ matrix.containerImage }}

    env:
      DISPLAY: ":99.0"
      ARNOLD_LICENSE_ORDER: none # Don't waste time looking for a license that doesn't exist
      GAFFER_BUILD_DIR: "./build"
      GAFFER_CACHE_DIR: "./sconsCache"

    steps:

    - uses: actions/checkout@v2

    - uses: ilammy/msvc-dev-cmd@v1.10.0
      with:
        sdk: 10.0.17763.0

    - name: Install toolchain (Windows)
      run: |
        python -m pip install scons
        Invoke-WebRequest -Uri "https://inkscape.org/gallery/item/18067/inkscape-0.92.5-x64.exe" -OutFile "inkscape.exe"
        Start-Process .\inkscape.exe /S -NoNewWindow -Wait
      shell: pwsh
      if: runner.os == 'Windows'

    - name: Install toolchain (MacOS)
      # Prefer `pip install` where possible because it is faster
      # than `brew install`.
      run: |
        sudo pip3 install scons==4.3.0
        sudo pip3 install sphinx==4.3.1 sphinx_rtd_theme==1.0.0 myst-parser==0.15.2 docutils==0.17.1
        # Force inkscape < 1.0 until SConstruct is updated
        brew install --cask xquartz &&
        brew install --cask ./config/brew/Casks/inkscape.rb
        # Brew installs all manner of headers into `/usr/local/include`, including
        # OpenEXR and Imath versions that conflict with our own. We can't stop Clang
        # finding them because Clang is hardcoded to look in `/usr/local/include`
        # _before_ anything we specify with `-isystem`, despite documentation to the
        # contrary. So we nuke the headers.
        rm -rf /usr/local/include/*
      if: runner.os == 'macOS'

    - name: Install toolchain (Linux)
      run: |
        Xvfb :99 -screen 0 1280x1024x24 &
        metacity&
        useradd -m testUser
        echo LD_PRELOAD=libSegFault.so >> $GITHUB_ENV

        # The Docker container configures bash shells such that they enable the
        # software collections we want. If we could set GitHub's
        # `defaults.run.shell` to `bash` then all our build steps would pick up
        # this environment automatically. But we can't do that because it
        # breaks the build on Windows, and we can't configure a different shell
        # per platform because GitHub won't allow it. But we can run _this_
        # Linux-only step in bash, and transfer the environment out to be used
        # in later steps.
        echo $PATH > $GITHUB_PATH
        echo LD_LIBRARY_PATH=$LD_LIBRARY_PATH >> $GITHUB_ENV
        echo DISPLAY=$DISPLAY >> $GITHUB_ENV
      shell: bash
      if: runner.os == 'Linux'

    - name: 'Install Python Modules'
      run: |
        python --version
        pip install PyJWT==1.7.1 PyGitHub==1.45

    - name: Set Custom Variables
      run: |
        .github/workflows/main/setBuildVars.py
        echo GAFFER_SPHINX=`which sphinx-build` >> $GITHUB_ENV
      env:
       GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       GAFFER_BUILD_VARIANT: ${{ matrix.name }}
      shell: bash

    - name: Disable macOS PR Docs
      run: |
        echo GAFFER_SPHINX=doesNotExist >> $GITHUB_ENV
        echo GAFFER_VALIDATE_EXTRA_FLAGS=--skipDocs >> $GITHUB_ENV
      if: runner.os == 'macOS' && env.GAFFER_GITHUB_RELEASEID == ''

    - name: Install dependencies
      # The `$GITHUB_ENV` shenanigans creates an environment variable
      # containing the hash of the archive, for use in the cache key
      # below.
      run: |
        echo GAFFER_DEPENDENCIES_HASH=`python .github/workflows/main/installDependencies.py --archiveURL ${{ matrix.dependenciesURL }} --dependenciesDir ${{ env.GAFFER_BUILD_DIR }} --outputFormat "{archiveDigest}"` >> $GITHUB_ENV
        ./.github/workflows/main/installDelight.py
        echo DELIGHT=$GITHUB_WORKSPACE/3delight >> $GITHUB_ENV
      shell: bash

    - name: Cache
      uses: actions/cache@v1
      with:
        path: ${{ env.GAFFER_CACHE_DIR }}
        key: ${{ runner.os }}-${{ matrix.containerImage }}-${{env.GAFFER_DEPENDENCIES_HASH}}-${{ matrix.buildType }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.containerImage }}-${{env.GAFFER_DEPENDENCIES_HASH}}-${{ matrix.buildType }}-

    - name: Build Gaffer
      run: |
       scons -j 2 build BUILD_TYPE=${{ matrix.buildType }} OPTIONS=.github/workflows/main/sconsOptions

    - name: Test
      # Tests should complete in well under an hour. If they don't it's most likely because
      # of a hang, in which case we'd like to know more quickly than the default 6hr timeout
      # allows.
      timeout-minutes: 60
      run: |
        echo "::add-matcher::./.github/workflows/main/problemMatchers/unittest.json"
        ${{ matrix.testRunner }} "${{ env.GAFFER_BUILD_DIR }}/bin/gaffer test"
        echo "::remove-matcher owner=unittest::"
      if: runner.os == 'macOS' || runner.os == 'Linux'

    - name: Build and test Arnold extension
      run: |
        import subprocess
        import sys
        import os

        for arnoldVersion in [ "6.2.0.1", "7.0.0.2" ] :
          arnoldRoot = os.path.join( os.environ["GITHUB_WORKSPACE"], "arnoldRoot", arnoldVersion )
          os.environ["ARNOLD_ROOT"] =  arnoldRoot

          subprocess.check_call(
            [
              sys.executable,
              ".github/workflows/main/installArnold.py",
              "--version",
              arnoldVersion
            ]
          )
          #Build Arnold extension
          subprocess.check_call( "scons -j 2 build BUILD_TYPE=${{ matrix.buildType }} OPTIONS=.github/workflows/main/sconsOptions", shell = True )

          if os.name != "nt" :
            # Test Arnold extension
            print( "::add-matcher::./.github/workflows/main/problemMatchers/unittest.json" )
            subprocess.check_call( "${{ matrix.testRunner }} \"" + os.path.join( os.environ["GAFFER_BUILD_DIR"], "bin", "gaffer" ) + " test IECoreArnoldTest GafferArnoldTest GafferArnoldUITest\"", shell = True )
            print( "::remove-matcher owner=unittest::" )
          
          # Publish ARNOLD_ROOT to the environment for subsequent steps,
          # so we can build the docs for GafferArnold.
          with open( os.environ["GITHUB_ENV"], "a" ) as f :
            print( "Setting $ARNOLD_ROOT to '%s'" % arnoldRoot )
            f.write( 'ARNOLD_ROOT=%s\n' % arnoldRoot )
        
      shell: python

    - name: Build Docs and Package
      # We currently experience sporadic hangs in the docs builds (mac), this
      # aborts them in a more timely fashion than the default 6hr timeout.
      timeout-minutes: 20
      run: |
        # Treats warnings-as-errors so we know about broken links
        echo "::add-matcher::./.github/workflows/main/problemMatchers/sphinx.json"
        scons -j 2 package BUILD_TYPE=${{ matrix.buildType }} OPTIONS=.github/workflows/main/sconsOptions
        echo "::remove-matcher owner=sphinx::"
      if: matrix.publish

    - name: Validate
      run: |
        echo "::add-matcher::./.github/workflows/main/problemMatchers/validateRelease.json"
        ./config/validateRelease.py --archive ${{ env.GAFFER_BUILD_NAME }}.tar.gz ${{ env.GAFFER_VALIDATE_EXTRA_FLAGS }}
        echo "::remove-matcher owner=validateRelease::"
      if: matrix.publish

    - uses: actions/upload-artifact@v2
      with:
        name: ${{ env.GAFFER_BUILD_NAME }}
        path: ${{ env.GAFFER_BUILD_NAME }}.tar.gz
      if: matrix.publish

    - name: Publish Release
      run: |
        ./config/publishRelease.py --archive ${{ env.GAFFER_BUILD_NAME }}.tar.gz --repo ${{ github.repository }} --releaseId ${{ env.GAFFER_GITHUB_RELEASEID }}
      if: matrix.publish && env.GAFFER_GITHUB_RELEASEID != ''
      env:
        GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Limit cache size
      # GitHub has a limit of 5G for all caches in a repository. Because we write new
      # files into `./sconsCache` with every build, we must trim its size to avoid
      # unbounded growth. In practice, the archives that get uploaded are much smaller
      # than the limit we apply here, because they're compressed.
      run: ./.github/workflows/main/limitDirectorySize.py --directory ./sconsCache --megabytes ${{ matrix.sconsCacheMegabytes }} --verbose

    - name: Debug Failures
      run: |
        # Give MacOS crash reporter time to do its thing
        sleep 20
        # Print SCons logs and MacOS crash logs
        shopt -s nullglob
        for logFile in config.log ~/Library/Logs/DiagnosticReports/*.crash
        do
         echo $logFile
         cat $logFile
        done
      if: failure()

