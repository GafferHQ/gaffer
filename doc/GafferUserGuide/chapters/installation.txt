== Installation anchor:installation_installation[]

=== Linux anchor:installation_linux[]
To install a pre-built package, simply download and untar the latest bundle from +++<a href="https://github.com/ImageEngine/gaffer/releases">the project site</a>+++. The resulting directory will contain the complete application ready to run.

Add the following location within the Gaffer directory to your `$PATH` environment variable (substituting `<GAFFER_INSTALL_PATH>` with the path to the unpacked directory):

------------------------------------
<GAFFER_INSTALL_PATH>/bin
------------------------------------


To use *3delight* with Gaffer you will need to:

* Ensure `<3DELIGHT_INSTALL_PATH>/bin` is in your `$PATH`.
* Set the `$DELIGHT` environment variable to point to `<3DELIGHT_INSTALL_PATH>`.
* Add `<3DELIGHT_INSTALL_PATH>/shaders` to the `$DL_SHADERS_PATH` environment variable.
* Add `<3DELIGHT_INSTALL_PATH>/displays` to the `$DL_DISPLAYS_PATH` environment variable.
* Add `<3DELIGHT_INSTALL_PATH>/lib` to the `$LD_LIBRARY_PATH` environment variable.

To use *Arnold* with Gaffer you will need to:

* Ensure `<ARNOLD_INSTALL_PATH>/bin` is in your `$PATH`.
* Add `<ARNOLD_INSTALL_PATH>/bin` to the `$LD_LIBRARY_PATH` environment variable.
* Add `<ARNOLD_INSTALL_PATH>/python` to the `$PYTHONPATH` environment variable


=== OS X anchor:installation_osx[]
Follow the steps as per the Linux section, but substitute `DYLD_LIBRARY_PATH` for any occurances of `LD_LIBRARY_PATH`.

=== Launching Gaffer anchor:installation_launchingGaffer[]
Once Gaffer is properly installed, simply launch it from the command-line as follows

------------------------------------
> gaffer
------------------------------------

Or to load an existing '.gfr' script, specify the path to the file after the gaffer command

------------------------------------
> gaffer /path/to/script.gfr
------------------------------------

The Gaffer app accepts command line flags to modify it's behaviour. To see a list of the flags available:

------------------------------------
> gaffer -help gui
------------------------------------

And this is an example of using flags (in this case opening the specified script in full-screen mode)

------------------------------------
> gaffer /path/to/script.gfr -fullScreen
------------------------------------




=== Customising anchor:installation_customising[]
Gaffer exposes a number of user configurable preferences, allowing individuals to set various behaviours to suit their current work-flow. These are accessible by navigating the main menu to launch _Gaffer -> Preferences..._

Additionally, elements of the user interface can be arranged and saved as *layouts*. Once saved these layouts can be restored at any time, or can be set to be the default gui arrangement. For more information on manipulating and managing layouts see the xref:interface_layouts[Interface chapter].

For users looking to perform customisations outside of the scope of the built-in preferences and layouts, Gaffer's python foundation offers extremely flexible hooks with which to expand or modify the application. For an introduction to custom config files take a look in the xref:configurationFilesExample[tutorials section].


