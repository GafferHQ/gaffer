=== Application Coding Example anchor:applicationCodingExample[]


==== Introduction

xref:helloWorldCodingExample[Previously] we created a simple hello world script using the GafferUI module. In this example we'll see how to turn that into a command line application using a few niceties that Gaffer provides.

You may recall from the hello world example that we ran our script as follows :

-------------------------------
gaffer python helloWorld.py
-------------------------------

The main "gaffer" command in this case is just a small script which launches applications - in this case the application was called "python" and it took the arguments "helloWorld.py". The gaffer command can run many such applications, and you can create custom applications of your own. Taking a look inside the gaffer package, you'll see all the standard applications layed out like so :

------------------------------------------------------------------------------
apps/gui
apps/gui/gui-1.py
apps/op
apps/op/op-1.py
apps/python/python-1.py
------------------------------------------------------------------------------

We can create a new application by creating a similar structure, and adding the top level "apps" directory we created to the GAFFER_APP_PATHS environment variable before running gaffer.

So without further ado, we can create the following structure and then edit "helloWorld-1.py" :

------------------------------------------------------------------------------
apps/helloWorld
apps/helloWorld-1.py
------------------------------------------------------------------------------

==== Writing our application
In helloWorld-1.py, we start by defining a class called helloWorld (the name must match the name in the filename), and deriving it from Gaffer.Application :

[source,python]
--------------------------------------------------------------------------------------------------
import IECore
import Gaffer

class helloWorld( Gaffer.Application ) :
--------------------------------------------------------------------------------------------------

We then define our command line arguments in our constructor, specifying them using Cortex parameters. If you're familiar with writing procedurals or ops in Cortex then these will be familiar to you. We'll define some parameters to form the default values for our ui :

[source,python]
--------------------------------------------------------------------------------------------------
def __init__( self ) :

    Gaffer.Application.__init__( self, "A manufacturer of friendly greetings." )
    
    self.parameters().addParameters(

        [
            
            IECore.StringParameter(
                name = "greeting",
                description = "The default greeting",
                defaultValue = "Hello",
            ),

            IECore.StringParameter(
                name = "greetee",
                description = "The default recipient of the greeting",
                defaultValue = "World",
            ),
                
        ]
    
    )
--------------------------------------------------------------------------------------------------


Finally, we just need to define the method _run(), which gaffer will use when it wants to run our application. Gaffer will already have parsed the command line arguments for us, and placed the results in a dictionary called args. Our _run() simply contains the "hello world" script, modified ever so slightly to populate the ui with the values provided in args. We also return a status code to provide the exit status for the application - in this case 0 to indicate general happiness.

[source,python]
--------------------------------------------------------------------------------------------------
def _run( self, args ) :

    import GafferUI

    with GafferUI.Window( title = "Hello World", borderWidth=10 ) as window :
        with GafferUI.ListContainer( spacing = 5 ) :
            with GafferUI.ListContainer( orientation = GafferUI.ListContainer.Orientation.Horizontal, spacing = 5 ) :
                GafferUI.Label( "Greeting" )
                greeting = GafferUI.TextWidget( args["greeting"].value )
            with GafferUI.ListContainer( orientation = GafferUI.ListContainer.Orientation.Horizontal, spacing = 5 ) :
                GafferUI.Label( "Greetee" )
                greetee = GafferUI.TextWidget( args["greetee"].value )
            message = GafferUI.TextWidget( "", editable=False )
                            
            button = GafferUI.Button( "Greet" )
    
    def greet( button ) :
    
        message.setText( greeting.getText() + " " + greetee.getText() )
                    
    clickedConnection = button.clickedSignal().connect( greet )

    window.setVisible( True )
    GafferUI.EventLoop.mainEventLoop().start()
    return 0
--------------------------------------------------------------------------------------------------

==== Running our application
We can now run our application as follows :

------------------------------------------------------------------
gaffer helloWorld
------------------------------------------------------------------
image::images/chapters/minitutorials/applicationCodingExample/helloWorld2.png[align="center"]

Or provide some command line arguments :

------------------------------------------------------------------
gaffer helloWorld -greeting "Wotcha" -greetee "Billy"
------------------------------------------------------------------
image::images/chapters/minitutorials/applicationCodingExample/helloWorld4.png[align="center"]

Or print command line help, automatically generated from the parameters :

....
gaffer -help helloWorld

Name : helloWorld

A manufacturer of friendly greetings

Parameters
----------

    profileFileName (FileName)
    --------------------------

    If this is specified, then the application is run using the cProfile profiling
    module, and the results saved to the file for later examination.

        Default :

    greeting (String)
    -----------------

    The default greeting

        Default : hello

    greetee (String)
    ----------------

    The default recipient of the greeting

        Default : world
....

==== Summary
This rather contrived example illustrates the basics of application creation, but really only scratches the surface of the Gaffer libraries - all we've really done is use them as a nice convenient way of defining command line arguments and having them parsed for us.

Take a look at the contents of the apps directory in the gaffer distribution to see more examples, and the other tutorials on this wiki (as and when they appear) to see what's available for producing a slightly more useful (but hopefully not less cheerful) application. 
