import Gaffer
import GafferAppleseed
import GafferImage
import GafferOSL
import GafferScene
import IECore

Gaffer.Metadata.registerNodeValue( parent, "serialiser:milestoneVersion", 0, persistent=False )
Gaffer.Metadata.registerNodeValue( parent, "serialiser:majorVersion", 28, persistent=False )
Gaffer.Metadata.registerNodeValue( parent, "serialiser:minorVersion", 3, persistent=False )
Gaffer.Metadata.registerNodeValue( parent, "serialiser:patchVersion", 0, persistent=False )

__children = {}

parent["variables"].addChild( Gaffer.CompoundDataPlug.MemberPlug( "projectName", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
parent["variables"]["projectName"].addChild( Gaffer.StringPlug( "name", defaultValue = 'project:name', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
parent["variables"]["projectName"].addChild( Gaffer.StringPlug( "value", defaultValue = 'default', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
parent["variables"].addChild( Gaffer.CompoundDataPlug.MemberPlug( "projectRootDirectory", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
parent["variables"]["projectRootDirectory"].addChild( Gaffer.StringPlug( "name", defaultValue = 'project:rootDirectory', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
parent["variables"]["projectRootDirectory"].addChild( Gaffer.StringPlug( "value", defaultValue = '$HOME/gaffer/projects/${project:name}', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["SceneReader"] = GafferScene.SceneReader( "SceneReader" )
parent.addChild( __children["SceneReader"] )
__children["SceneReader"]["fileName"].setValue( '${GAFFER_ROOT}/resources/gafferBot/caches/gafferBot.scc' )
__children["SceneReader"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = IECore.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["SceneReader"]["__uiPosition"].setValue( IECore.V2f( 0.399881065, 4.23418093 ) )
__children["Camera"] = GafferScene.Camera( "Camera" )
parent.addChild( __children["Camera"] )
__children["Camera"]["transform"]["translate"].setValue( IECore.V3f( 19, 13, 31 ) )
__children["Camera"]["transform"]["rotate"].setValue( IECore.V3f( 0, 30, 0 ) )
__children["Camera"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = IECore.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Camera"]["__uiPosition"].setValue( IECore.V2f( 13.3998814, 4.23291159 ) )
__children["Group"] = GafferScene.Group( "Group" )
parent.addChild( __children["Group"] )
__children["Group"]["in"].addChild( GafferScene.ScenePlug( "in1", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Group"]["in"].addChild( GafferScene.ScenePlug( "in2", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Group"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = IECore.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Group"]["__uiPosition"].setValue( IECore.V2f( 8.39987755, -4.93115139 ) )
__children["defaultFormat"] = GafferImage.FormatPlug( "defaultFormat", defaultValue = GafferImage.Format( 1920, 1080, 1.000 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["defaultFormat"] )
__children["StandardOptions"] = GafferScene.StandardOptions( "StandardOptions" )
parent.addChild( __children["StandardOptions"] )
__children["StandardOptions"]["options"]["renderCamera"]["value"].setValue( '/group/camera' )
__children["StandardOptions"]["options"]["renderCamera"]["enabled"].setValue( True )
__children["StandardOptions"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = IECore.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["StandardOptions"]["__uiPosition"].setValue( IECore.V2f( 8.39987755, -86.7940521 ) )
__children["Outputs"] = GafferScene.Outputs( "Outputs" )
parent.addChild( __children["Outputs"] )
__children["Outputs"]["outputs"].addChild( Gaffer.ValuePlug( "output1", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Outputs"]["outputs"]["output1"].addChild( Gaffer.StringPlug( "name", defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Outputs"]["outputs"]["output1"]["name"].setValue( 'Interactive/Beauty' )
__children["Outputs"]["outputs"]["output1"].addChild( Gaffer.BoolPlug( "active", defaultValue = True, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Outputs"]["outputs"]["output1"].addChild( Gaffer.StringPlug( "fileName", defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Outputs"]["outputs"]["output1"]["fileName"].setValue( 'beauty' )
__children["Outputs"]["outputs"]["output1"].addChild( Gaffer.StringPlug( "type", defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Outputs"]["outputs"]["output1"]["type"].setValue( 'ieDisplay' )
__children["Outputs"]["outputs"]["output1"].addChild( Gaffer.StringPlug( "data", defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Outputs"]["outputs"]["output1"]["data"].setValue( 'rgba' )
__children["Outputs"]["outputs"]["output1"].addChild( Gaffer.CompoundDataPlug( "parameters", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Outputs"]["outputs"]["output1"]["parameters"].addChild( Gaffer.CompoundDataPlug.MemberPlug( "displayHost", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Outputs"]["outputs"]["output1"]["parameters"]["displayHost"].addChild( Gaffer.StringPlug( "name", defaultValue = 'displayHost', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Outputs"]["outputs"]["output1"]["parameters"]["displayHost"].addChild( Gaffer.StringPlug( "value", defaultValue = 'localhost', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Outputs"]["outputs"]["output1"]["parameters"].addChild( Gaffer.CompoundDataPlug.MemberPlug( "displayPort", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Outputs"]["outputs"]["output1"]["parameters"]["displayPort"].addChild( Gaffer.StringPlug( "name", defaultValue = 'displayPort', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Outputs"]["outputs"]["output1"]["parameters"]["displayPort"].addChild( Gaffer.StringPlug( "value", defaultValue = '1559', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Outputs"]["outputs"]["output1"]["parameters"].addChild( Gaffer.CompoundDataPlug.MemberPlug( "driverType", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Outputs"]["outputs"]["output1"]["parameters"]["driverType"].addChild( Gaffer.StringPlug( "name", defaultValue = 'driverType', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Outputs"]["outputs"]["output1"]["parameters"]["driverType"].addChild( Gaffer.StringPlug( "value", defaultValue = 'ClientDisplayDriver', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Outputs"]["outputs"]["output1"]["parameters"].addChild( Gaffer.CompoundDataPlug.MemberPlug( "quantize", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Outputs"]["outputs"]["output1"]["parameters"]["quantize"].addChild( Gaffer.StringPlug( "name", defaultValue = 'quantize', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Outputs"]["outputs"]["output1"]["parameters"]["quantize"].addChild( Gaffer.IntVectorDataPlug( "value", defaultValue = IECore.IntVectorData( [ 0, 0, 0, 0 ] ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Outputs"]["outputs"]["output1"]["parameters"].addChild( Gaffer.CompoundDataPlug.MemberPlug( "remoteDisplayType", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Outputs"]["outputs"]["output1"]["parameters"]["remoteDisplayType"].addChild( Gaffer.StringPlug( "name", defaultValue = 'remoteDisplayType', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Outputs"]["outputs"]["output1"]["parameters"]["remoteDisplayType"].addChild( Gaffer.StringPlug( "value", defaultValue = 'GafferImage::GafferDisplayDriver', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Outputs"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = IECore.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Outputs"]["__uiPosition"].setValue( IECore.V2f( 8.39458466, -105.122169 ) )
__children["InteractiveAppleseedRender"] = GafferAppleseed.InteractiveAppleseedRender( "InteractiveAppleseedRender" )
parent.addChild( __children["InteractiveAppleseedRender"] )
__children["InteractiveAppleseedRender"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = IECore.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["InteractiveAppleseedRender"]["__uiPosition"].setValue( IECore.V2f( 8.3926487, -114.286224 ) )
__children["Display"] = GafferImage.Display( "Display" )
parent.addChild( __children["Display"] )
__children["Display"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = IECore.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Display"]["__uiPosition"].setValue( IECore.V2f( 25.9345436, -114.001328 ) )
__children["as_disney_material"] = GafferOSL.OSLShader( "as_disney_material" )
parent.addChild( __children["as_disney_material"] )
__children["as_disney_material"]["name"].setValue( 'material/as_disney_material' )
__children["as_disney_material"]["type"].setValue( 'osl:surface' )
__children["as_disney_material"]["parameters"].addChild( Gaffer.V3fPlug( "Normal", defaultValue = IECore.V3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_disney_material"]["parameters"].addChild( Gaffer.V3fPlug( "Tn", defaultValue = IECore.V3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_disney_material"]["parameters"].addChild( Gaffer.Color3fPlug( "BaseColor", defaultValue = IECore.Color3f( 0.5, 0.5, 0.5 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_disney_material"]["parameters"].addChild( Gaffer.FloatPlug( "Subsurface", defaultValue = 0.0, minValue = 0.0, maxValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_disney_material"]["parameters"].addChild( Gaffer.FloatPlug( "Metallic", defaultValue = 0.0, minValue = 0.0, maxValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_disney_material"]["parameters"].addChild( Gaffer.FloatPlug( "Specular", defaultValue = 0.5, minValue = 0.0, maxValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_disney_material"]["parameters"]["Specular"].setValue( 0.6000000238418579 )
__children["as_disney_material"]["parameters"].addChild( Gaffer.FloatPlug( "SpecularTint", defaultValue = 0.0, minValue = 0.0, maxValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_disney_material"]["parameters"].addChild( Gaffer.FloatPlug( "Anisotropic", defaultValue = 0.0, minValue = -1.0, maxValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_disney_material"]["parameters"].addChild( Gaffer.FloatPlug( "Roughness", defaultValue = 0.5, minValue = 0.0, maxValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_disney_material"]["parameters"]["Roughness"].setValue( 0.3499999940395355 )
__children["as_disney_material"]["parameters"].addChild( Gaffer.FloatPlug( "Sheen", defaultValue = 0.0, minValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_disney_material"]["parameters"].addChild( Gaffer.FloatPlug( "SheenTint", defaultValue = 0.5, minValue = 0.0, maxValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_disney_material"]["parameters"].addChild( Gaffer.FloatPlug( "Clearcoat", defaultValue = 0.0, minValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_disney_material"]["parameters"].addChild( Gaffer.FloatPlug( "ClearcoatGloss", defaultValue = 1.0, minValue = 0.0, maxValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_disney_material"].addChild( Gaffer.Plug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_disney_material"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = IECore.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_disney_material"]["__uiPosition"].setValue( IECore.V2f( -11.540679, -42.5968018 ) )
__children["ShaderAssignment"] = GafferScene.ShaderAssignment( "ShaderAssignment" )
parent.addChild( __children["ShaderAssignment"] )
__children["ShaderAssignment"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = IECore.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ShaderAssignment"]["__uiPosition"].setValue( IECore.V2f( 8.39987755, -42.5968018 ) )
__children["AppleseedOptions"] = GafferAppleseed.AppleseedOptions( "AppleseedOptions" )
parent.addChild( __children["AppleseedOptions"] )
__children["AppleseedOptions"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = IECore.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["AppleseedOptions"]["__uiPosition"].setValue( IECore.V2f( 8.39794064, -95.9581146 ) )
parent["variables"]["projectName"]["name"].setFlags( Gaffer.Plug.Flags.ReadOnly, True )
parent["variables"]["projectRootDirectory"]["name"].setFlags( Gaffer.Plug.Flags.ReadOnly, True )
__children["Group"]["in"]["in0"].setInput( __children["SceneReader"]["out"] )
__children["Group"]["in"]["in1"].setInput( __children["Camera"]["out"] )
__children["StandardOptions"]["in"].setInput( __children["ShaderAssignment"]["out"] )
__children["Outputs"]["in"].setInput( __children["AppleseedOptions"]["out"] )
__children["InteractiveAppleseedRender"]["in"].setInput( __children["Outputs"]["out"] )
__children["ShaderAssignment"]["in"].setInput( __children["Group"]["out"] )
__children["ShaderAssignment"]["shader"].setInput( __children["as_disney_material"]["out"] )
__children["AppleseedOptions"]["in"].setInput( __children["StandardOptions"]["out"] )
__children["as_disney_material"].loadShader( "material/as_disney_material", keepExistingValues=True )


del __children

