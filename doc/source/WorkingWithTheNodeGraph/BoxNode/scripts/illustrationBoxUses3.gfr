import Gaffer
import GafferAppleseed
import GafferDispatch
import GafferImage
import GafferOSL
import GafferScene
import IECore
import imath

Gaffer.Metadata.registerNodeValue( parent, "serialiser:milestoneVersion", 0, persistent=False )
Gaffer.Metadata.registerNodeValue( parent, "serialiser:majorVersion", 53, persistent=False )
Gaffer.Metadata.registerNodeValue( parent, "serialiser:minorVersion", 0, persistent=False )
Gaffer.Metadata.registerNodeValue( parent, "serialiser:patchVersion", 0, persistent=False )

__children = {}

__children["SceneReader"] = GafferScene.SceneReader( "SceneReader" )
parent.addChild( __children["SceneReader"] )
__children["SceneReader"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PathFilter"] = GafferScene.PathFilter( "PathFilter" )
parent.addChild( __children["PathFilter"] )
__children["PathFilter"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["InteractiveAppleseedRender"] = GafferAppleseed.InteractiveAppleseedRender( "InteractiveAppleseedRender" )
parent.addChild( __children["InteractiveAppleseedRender"] )
__children["InteractiveAppleseedRender"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["AppleseedRender"] = GafferAppleseed.AppleseedRender( "AppleseedRender" )
parent.addChild( __children["AppleseedRender"] )
__children["AppleseedRender"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Catalogue"] = GafferImage.Catalogue( "Catalogue" )
parent.addChild( __children["Catalogue"] )
__children["Catalogue"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box"] = Gaffer.Box( "Box" )
parent.addChild( __children["Box"] )
__children["Box"].addChild( GafferScene.Set( "Set" ) )
__children["Box"]["Set"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box"].addChild( GafferScene.ScenePlug( "in", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box"].addChild( GafferScene.FilterPlug( "filter", defaultValue = 0, minValue = 0, maxValue = 7, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box"].addChild( GafferScene.Set( "Set1" ) )
__children["Box"]["Set1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box"].addChild( GafferScene.ScenePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box"].addChild( Gaffer.BoxIn( "BoxIn" ) )
__children["Box"]["BoxIn"].setup( GafferScene.ScenePlug( "out", ) )
__children["Box"].addChild( Gaffer.BoxIn( "BoxIn1" ) )
__children["Box"]["BoxIn1"].setup( GafferScene.FilterPlug( "out", defaultValue = 0, minValue = 0, maxValue = 7, ) )
__children["Box"].addChild( Gaffer.BoxOut( "BoxOut" ) )
__children["Box"]["BoxOut"].setup( GafferScene.ScenePlug( "in", ) )
__children["Box"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box1"] = Gaffer.Box( "Box1" )
parent.addChild( __children["Box1"] )
__children["Box1"].addChild( GafferScene.ShaderAssignment( "ShaderAssignment" ) )
__children["Box1"]["ShaderAssignment"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box1"].addChild( GafferScene.ScenePlug( "in", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box1"].addChild( GafferScene.FilterPlug( "filter", defaultValue = 7, minValue = 0, maxValue = 7, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box1"].addChild( GafferScene.ShaderAssignment( "ShaderAssignment1" ) )
__children["Box1"]["ShaderAssignment1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box1"].addChild( GafferScene.ScenePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box1"].addChild( GafferOSL.OSLShader( "as_color_texture" ) )
__children["Box1"]["as_color_texture"].loadShader( "texture2d/as_color_texture" )
__children["Box1"]["as_color_texture"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box1"].addChild( GafferOSL.OSLShader( "as_disney_material" ) )
__children["Box1"]["as_disney_material"].loadShader( "material/as_disney_material" )
__children["Box1"]["as_disney_material"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box1"].addChild( GafferOSL.OSLShader( "as_disney_material1" ) )
__children["Box1"]["as_disney_material1"].loadShader( "material/as_disney_material" )
__children["Box1"]["as_disney_material1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box1"].addChild( Gaffer.BoxIn( "BoxIn" ) )
__children["Box1"]["BoxIn"].setup( GafferScene.ScenePlug( "out", ) )
__children["Box1"].addChild( Gaffer.BoxIn( "BoxIn1" ) )
__children["Box1"]["BoxIn1"].setup( GafferScene.FilterPlug( "out", defaultValue = 7, minValue = 0, maxValue = 7, ) )
__children["Box1"].addChild( Gaffer.BoxOut( "BoxOut" ) )
__children["Box1"]["BoxOut"].setup( GafferScene.ScenePlug( "in", ) )
__children["Box1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box2"] = Gaffer.Box( "Box2" )
parent.addChild( __children["Box2"] )
__children["Box2"].addChild( GafferScene.Group( "Group" ) )
__children["Box2"]["Group"]["in"].addChild( GafferScene.ScenePlug( "in1", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box2"]["Group"]["in"].addChild( GafferScene.ScenePlug( "in2", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box2"]["Group"]["in"].addChild( GafferScene.ScenePlug( "in3", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box2"]["Group"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box2"].addChild( GafferScene.ScenePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box2"].addChild( GafferScene.ScenePlug( "in_in0", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box2"].addChild( GafferAppleseed.AppleseedLight( "directional_light" ) )
__children["Box2"]["directional_light"].loadShader( "directional_light" )
__children["Box2"]["directional_light"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box2"].addChild( GafferScene.Camera( "Camera" ) )
__children["Box2"]["Camera"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box2"].addChild( Gaffer.BoxOut( "BoxOut" ) )
__children["Box2"]["BoxOut"].setup( GafferScene.ScenePlug( "in", ) )
__children["Box2"].addChild( Gaffer.BoxIn( "BoxIn" ) )
__children["Box2"]["BoxIn"].setup( GafferScene.ScenePlug( "out", ) )
__children["Box2"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box3"] = Gaffer.Box( "Box3" )
parent.addChild( __children["Box3"] )
__children["Box3"].addChild( GafferAppleseed.AppleseedOptions( "AppleseedOptions" ) )
__children["Box3"]["AppleseedOptions"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box3"].addChild( GafferScene.ScenePlug( "in", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box3"].addChild( GafferScene.StandardOptions( "StandardOptions" ) )
__children["Box3"]["StandardOptions"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box3"].addChild( GafferScene.Outputs( "Outputs" ) )
__children["Box3"]["Outputs"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box3"].addChild( GafferScene.ScenePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box3"].addChild( Gaffer.BoxIn( "BoxIn" ) )
__children["Box3"]["BoxIn"].setup( GafferScene.ScenePlug( "out", ) )
__children["Box3"].addChild( Gaffer.BoxOut( "BoxOut" ) )
__children["Box3"]["BoxOut"].setup( GafferScene.ScenePlug( "in", ) )
__children["Box3"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["SceneReader"]["__uiPosition"].setValue( imath.V2f( -26.6860752, 3.33652973 ) )
__children["PathFilter"]["__uiPosition"].setValue( imath.V2f( -9.88607311, -1.04550147 ) )
__children["InteractiveAppleseedRender"]["in"].setInput( __children["Box3"]["out"] )
__children["InteractiveAppleseedRender"]["__uiPosition"].setValue( imath.V2f( -22.2700901, -86.6676941 ) )
__children["AppleseedRender"]["in"].setInput( __children["Box3"]["out"] )
__children["AppleseedRender"]["fileName"].setValue( '${project:rootDirectory}/appleseeds/${script:name}/${script:name}.####.appleseed' )
__children["AppleseedRender"]["__uiPosition"].setValue( imath.V2f( -40.0083275, -86.6972198 ) )
__children["Catalogue"]["directory"].setValue( '${project:rootDirectory}/catalogues/${script:name}' )
__children["Catalogue"]["__uiPosition"].setValue( imath.V2f( -4.80829668, -86.797226 ) )
__children["Box"]["Set"]["in"].setInput( __children["Box"]["BoxIn"]["out"] )
__children["Box"]["Set"]["filter"].setInput( __children["Box"]["BoxIn1"]["out"] )
__children["Box"]["Set"]["__uiPosition"].setValue( imath.V2f( -26.6860752, -4.82753277 ) )
__children["Box"]["in"].setInput( __children["SceneReader"]["out"] )
Gaffer.Metadata.registerValue( __children["Box"]["in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["Box"]["in"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["Box"]["in"], 'description', 'The input scene' )
Gaffer.Metadata.registerValue( __children["Box"]["in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["Box"]["in"], 'noduleLayout:spacing', 2.0 )
__children["Box"]["filter"].setInput( __children["PathFilter"]["out"] )
Gaffer.Metadata.registerValue( __children["Box"]["filter"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["Box"]["filter"], 'description', 'A filter to define additional paths to be added to\nor removed from the set.\n\n> Caution : Using a filter can be very expensive.\nIt is advisable to limit use to filters with a\nlimited number of matches and/or sets which are\nnot used heavily downstream. Wherever possible,\nprefer to use the `paths` plug directly instead\nof using a filter.' )
Gaffer.Metadata.registerValue( __children["Box"]["filter"], 'noduleLayout:section', 'right' )
Gaffer.Metadata.registerValue( __children["Box"]["filter"], 'plugValueWidget:type', 'GafferSceneUI.FilterPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["Box"]["filter"], 'nodule:color', imath.Color3f( 0.689999998, 0.537800014, 0.228300005 ) )
__children["Box"]["Set1"]["in"].setInput( __children["Box"]["Set"]["out"] )
__children["Box"]["Set1"]["filter"].setInput( __children["Box"]["BoxIn1"]["out"] )
__children["Box"]["Set1"]["__uiPosition"].setValue( imath.V2f( -26.6860752, -12.9915953 ) )
__children["Box"]["out"].setInput( __children["Box"]["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["Box"]["out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["Box"]["out"], 'description', 'The processed output scene.' )
Gaffer.Metadata.registerValue( __children["Box"]["out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
__children["Box"]["BoxIn"]["__in"].setInput( __children["Box"]["in"] )
Gaffer.Metadata.registerValue( __children["Box"]["BoxIn"]["__in"], 'labelPlugValueWidget:renameable', True )
Gaffer.Metadata.registerValue( __children["Box"]["BoxIn"]["__in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["Box"]["BoxIn"]["__in"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["Box"]["BoxIn"]["__in"], 'description', 'The input scene' )
Gaffer.Metadata.registerValue( __children["Box"]["BoxIn"]["__in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["Box"]["BoxIn"]["__in"], 'noduleLayout:spacing', 2.0 )
__children["Box"]["BoxIn1"]["name"].setValue( 'filter' )
__children["Box"]["BoxIn1"]["__in"].setInput( __children["Box"]["filter"] )
Gaffer.Metadata.registerValue( __children["Box"]["BoxIn1"]["__in"], 'labelPlugValueWidget:renameable', True )
Gaffer.Metadata.registerValue( __children["Box"]["BoxIn1"]["__in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["Box"]["BoxIn1"]["__in"], 'description', 'A filter to define additional paths to be added to\nor removed from the set.\n\n> Caution : Using a filter can be very expensive.\nIt is advisable to limit use to filters with a\nlimited number of matches and/or sets which are\nnot used heavily downstream. Wherever possible,\nprefer to use the `paths` plug directly instead\nof using a filter.' )
Gaffer.Metadata.registerValue( __children["Box"]["BoxIn1"]["__in"], 'noduleLayout:section', 'right' )
Gaffer.Metadata.registerValue( __children["Box"]["BoxIn1"]["__in"], 'plugValueWidget:type', 'GafferSceneUI.FilterPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["Box"]["BoxIn1"]["__in"], 'nodule:color', imath.Color3f( 0.689999998, 0.537800014, 0.228300005 ) )
__children["Box"]["BoxOut"]["in"].setInput( __children["Box"]["Set1"]["out"] )
__children["Box"]["__uiPosition"].setValue( imath.V2f( -25.2287922, -8.21509838 ) )
__children["Box1"]["ShaderAssignment"]["in"].setInput( __children["Box1"]["BoxIn"]["out"] )
__children["Box1"]["ShaderAssignment"]["filter"].setInput( __children["Box1"]["BoxIn1"]["out"] )
__children["Box1"]["ShaderAssignment"]["shader"].setInput( __children["Box1"]["as_disney_material"]["out"] )
__children["Box1"]["ShaderAssignment"]["__uiPosition"].setValue( imath.V2f( -26.7287922, -21.1555176 ) )
__children["Box1"]["in"].setInput( __children["Box"]["out"] )
Gaffer.Metadata.registerValue( __children["Box1"]["in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["Box1"]["in"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["Box1"]["in"], 'description', 'The input scene' )
Gaffer.Metadata.registerValue( __children["Box1"]["in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["Box1"]["in"], 'noduleLayout:spacing', 2.0 )
__children["Box1"]["filter"].setInput( __children["PathFilter"]["out"] )
Gaffer.Metadata.registerValue( __children["Box1"]["filter"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["Box1"]["filter"], 'description', 'The filter used to control which parts of the scene are\nprocessed. A Filter node should be connected here.' )
Gaffer.Metadata.registerValue( __children["Box1"]["filter"], 'noduleLayout:section', 'right' )
Gaffer.Metadata.registerValue( __children["Box1"]["filter"], 'plugValueWidget:type', 'GafferSceneUI.FilterPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["Box1"]["filter"], 'nodule:color', imath.Color3f( 0.689999998, 0.537800014, 0.228300005 ) )
__children["Box1"]["ShaderAssignment1"]["in"].setInput( __children["Box1"]["ShaderAssignment"]["out"] )
__children["Box1"]["ShaderAssignment1"]["filter"].setInput( __children["Box1"]["BoxIn1"]["out"] )
__children["Box1"]["ShaderAssignment1"]["shader"].setInput( __children["Box1"]["as_disney_material1"]["out"] )
__children["Box1"]["ShaderAssignment1"]["__uiPosition"].setValue( imath.V2f( -26.7734604, -39.6373978 ) )
__children["Box1"]["out"].setInput( __children["Box1"]["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["Box1"]["out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["Box1"]["out"], 'description', 'The processed output scene.' )
Gaffer.Metadata.registerValue( __children["Box1"]["out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
__children["Box1"]["as_color_texture"]["__uiPosition"].setValue( imath.V2f( -70.9190292, -27.6555195 ) )
__children["Box1"]["as_disney_material"]["parameters"]["BaseColor"].setInput( __children["Box1"]["as_color_texture"]["out"]["ColorOut"] )
__children["Box1"]["as_disney_material"]["parameters"]["BaseColor"]["r"].setInput( __children["Box1"]["as_color_texture"]["out"]["ColorOut"]["r"] )
__children["Box1"]["as_disney_material"]["parameters"]["BaseColor"]["g"].setInput( __children["Box1"]["as_color_texture"]["out"]["ColorOut"]["g"] )
__children["Box1"]["as_disney_material"]["parameters"]["BaseColor"]["b"].setInput( __children["Box1"]["as_color_texture"]["out"]["ColorOut"]["b"] )
__children["Box1"]["as_disney_material"]["__uiPosition"].setValue( imath.V2f( -45.3642807, -21.1555176 ) )
__children["Box1"]["as_disney_material1"]["parameters"]["BaseColor"].setInput( __children["Box1"]["as_color_texture"]["out"]["ColorOut"] )
__children["Box1"]["as_disney_material1"]["parameters"]["BaseColor"]["r"].setInput( __children["Box1"]["as_color_texture"]["out"]["ColorOut"]["r"] )
__children["Box1"]["as_disney_material1"]["parameters"]["BaseColor"]["g"].setInput( __children["Box1"]["as_color_texture"]["out"]["ColorOut"]["g"] )
__children["Box1"]["as_disney_material1"]["parameters"]["BaseColor"]["b"].setInput( __children["Box1"]["as_color_texture"]["out"]["ColorOut"]["b"] )
__children["Box1"]["as_disney_material1"]["__uiPosition"].setValue( imath.V2f( -45.008812, -39.6373978 ) )
__children["Box1"]["BoxIn"]["__in"].setInput( __children["Box1"]["in"] )
Gaffer.Metadata.registerValue( __children["Box1"]["BoxIn"]["__in"], 'labelPlugValueWidget:renameable', True )
Gaffer.Metadata.registerValue( __children["Box1"]["BoxIn"]["__in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["Box1"]["BoxIn"]["__in"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["Box1"]["BoxIn"]["__in"], 'description', 'The input scene' )
Gaffer.Metadata.registerValue( __children["Box1"]["BoxIn"]["__in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["Box1"]["BoxIn"]["__in"], 'noduleLayout:spacing', 2.0 )
__children["Box1"]["BoxIn1"]["name"].setValue( 'filter' )
__children["Box1"]["BoxIn1"]["__in"].setInput( __children["Box1"]["filter"] )
Gaffer.Metadata.registerValue( __children["Box1"]["BoxIn1"]["__in"], 'labelPlugValueWidget:renameable', True )
Gaffer.Metadata.registerValue( __children["Box1"]["BoxIn1"]["__in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["Box1"]["BoxIn1"]["__in"], 'description', 'The filter used to control which parts of the scene are\nprocessed. A Filter node should be connected here.' )
Gaffer.Metadata.registerValue( __children["Box1"]["BoxIn1"]["__in"], 'noduleLayout:section', 'right' )
Gaffer.Metadata.registerValue( __children["Box1"]["BoxIn1"]["__in"], 'plugValueWidget:type', 'GafferSceneUI.FilterPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["Box1"]["BoxIn1"]["__in"], 'nodule:color', imath.Color3f( 0.689999998, 0.537800014, 0.228300005 ) )
__children["Box1"]["BoxOut"]["in"].setInput( __children["Box1"]["ShaderAssignment1"]["out"] )
__children["Box1"]["__uiPosition"].setValue( imath.V2f( -25.2287922, -23.5242863 ) )
__children["Box2"]["Group"]["in"]["in0"].setInput( __children["Box2"]["BoxIn"]["out"] )
__children["Box2"]["Group"]["in"]["in1"].setInput( __children["Box2"]["directional_light"]["out"] )
__children["Box2"]["Group"]["in"]["in2"].setInput( __children["Box2"]["Camera"]["out"] )
__children["Box2"]["Group"]["__uiPosition"].setValue( imath.V2f( -22.2734604, -54.0114479 ) )
__children["Box2"]["out"].setInput( __children["Box2"]["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["Box2"]["out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["Box2"]["out"], 'description', 'The processed output scene.' )
Gaffer.Metadata.registerValue( __children["Box2"]["out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
__children["Box2"]["in_in0"].setInput( __children["Box1"]["out"] )
Gaffer.Metadata.registerValue( __children["Box2"]["in_in0"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
__children["Box2"]["directional_light"]["__uiPosition"].setValue( imath.V2f( -1.42083836, -45.8473854 ) )
__children["Box2"]["Camera"]["__uiPosition"].setValue( imath.V2f( 11.1812506, -45.8473854 ) )
__children["Box2"]["BoxOut"]["in"].setInput( __children["Box2"]["Group"]["out"] )
__children["Box2"]["BoxIn"]["name"].setValue( 'in_in0' )
__children["Box2"]["BoxIn"]["__in"].setInput( __children["Box2"]["in_in0"] )
Gaffer.Metadata.registerValue( __children["Box2"]["BoxIn"]["__in"], 'labelPlugValueWidget:renameable', True )
Gaffer.Metadata.registerValue( __children["Box2"]["BoxIn"]["__in"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
__children["Box2"]["__uiPosition"].setValue( imath.V2f( -25.2287922, -46.0894165 ) )
__children["Box3"]["AppleseedOptions"]["in"].setInput( __children["Box3"]["BoxIn"]["out"] )
__children["Box3"]["AppleseedOptions"]["__uiPosition"].setValue( imath.V2f( -22.2726192, -62.1755104 ) )
__children["Box3"]["in"].setInput( __children["Box2"]["out"] )
Gaffer.Metadata.registerValue( __children["Box3"]["in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["Box3"]["in"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["Box3"]["in"], 'description', 'The input scene' )
Gaffer.Metadata.registerValue( __children["Box3"]["in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["Box3"]["in"], 'noduleLayout:spacing', 2.0 )
__children["Box3"]["StandardOptions"]["in"].setInput( __children["Box3"]["AppleseedOptions"]["out"] )
__children["Box3"]["StandardOptions"]["__uiPosition"].setValue( imath.V2f( -22.2717762, -70.3395691 ) )
__children["Box3"]["Outputs"]["in"].setInput( __children["Box3"]["StandardOptions"]["out"] )
__children["Box3"]["Outputs"]["__uiPosition"].setValue( imath.V2f( -22.2709332, -78.5036316 ) )
__children["Box3"]["out"].setInput( __children["Box3"]["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["Box3"]["out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["Box3"]["out"], 'description', 'The processed output scene.' )
Gaffer.Metadata.registerValue( __children["Box3"]["out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
__children["Box3"]["BoxIn"]["__in"].setInput( __children["Box3"]["in"] )
Gaffer.Metadata.registerValue( __children["Box3"]["BoxIn"]["__in"], 'labelPlugValueWidget:renameable', True )
Gaffer.Metadata.registerValue( __children["Box3"]["BoxIn"]["__in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["Box3"]["BoxIn"]["__in"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["Box3"]["BoxIn"]["__in"], 'description', 'The input scene' )
Gaffer.Metadata.registerValue( __children["Box3"]["BoxIn"]["__in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["Box3"]["BoxIn"]["__in"], 'noduleLayout:spacing', 2.0 )
__children["Box3"]["BoxOut"]["in"].setInput( __children["Box3"]["Outputs"]["out"] )
__children["Box3"]["__uiPosition"].setValue( imath.V2f( -25.2287922, -71.0312347 ) )

del __children
