import Gaffer
import GafferOSL
import GafferScene
import IECore
import imath

Gaffer.Metadata.registerNodeValue( parent, "serialiser:milestoneVersion", 0, persistent=False )
Gaffer.Metadata.registerNodeValue( parent, "serialiser:majorVersion", 53, persistent=False )
Gaffer.Metadata.registerNodeValue( parent, "serialiser:minorVersion", 0, persistent=False )
Gaffer.Metadata.registerNodeValue( parent, "serialiser:patchVersion", 0, persistent=False )

__children = {}

__children["mySurfaceShaders"] = Gaffer.Box( "mySurfaceShaders" )
parent.addChild( __children["mySurfaceShaders"] )
__children["mySurfaceShaders"].addChild( Gaffer.BoxIn( "BoxIn" ) )
__children["mySurfaceShaders"]["BoxIn"].setup( GafferScene.ScenePlug( "out", ) )
__children["mySurfaceShaders"]["BoxIn"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["mySurfaceShaders"].addChild( GafferScene.ScenePlug( "in", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["mySurfaceShaders"].addChild( Gaffer.BoxOut( "BoxOut" ) )
__children["mySurfaceShaders"]["BoxOut"].setup( GafferScene.ScenePlug( "in", ) )
__children["mySurfaceShaders"]["BoxOut"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["mySurfaceShaders"].addChild( GafferScene.ScenePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["mySurfaceShaders"].addChild( Gaffer.BoolPlug( "enabled", defaultValue = True, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["mySurfaceShaders"].addChild( GafferScene.Group( "Group" ) )
__children["mySurfaceShaders"]["Group"]["in"].addChild( GafferScene.ScenePlug( "in1", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["mySurfaceShaders"]["Group"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["mySurfaceShaders"].addChild( GafferScene.ShaderAssignment( "ShaderAssignment" ) )
__children["mySurfaceShaders"]["ShaderAssignment"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["mySurfaceShaders"].addChild( Gaffer.BoxIn( "BoxIn1" ) )
__children["mySurfaceShaders"]["BoxIn1"].setup( GafferScene.FilterPlug( "out", defaultValue = 7, minValue = 0, maxValue = 7, ) )
__children["mySurfaceShaders"]["BoxIn1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["mySurfaceShaders"].addChild( GafferScene.FilterPlug( "filter", defaultValue = 7, minValue = 0, maxValue = 7, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["mySurfaceShaders"].addChild( GafferOSL.OSLShader( "as_disney_material" ) )
__children["mySurfaceShaders"]["as_disney_material"].loadShader( "material/as_disney_material" )
__children["mySurfaceShaders"]["as_disney_material"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["mySurfaceShaders"].addChild( Gaffer.BoxIn( "BoxIn2" ) )
__children["mySurfaceShaders"]["BoxIn2"].setup( Gaffer.Color3fPlug( "out", defaultValue = imath.Color3f( 0.5, 0.5, 0.5 ), ) )
__children["mySurfaceShaders"]["BoxIn2"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["mySurfaceShaders"].addChild( Gaffer.Color3fPlug( "textures", defaultValue = imath.Color3f( 0.5, 0.5, 0.5 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"], 'description', "A custom Box for surface shader assignment. Assigns standard shaders based on the following sets:\n<ul>\n<li>brushed_steel</li>\n<li>dark_metal</li>\n<li>carbon_fiber</li>\n<li>glass</li>\n<li>plastic</li>\n<li>wood_grain</li>\n</ul>\nMake sure to connect a Path Filter pointing to the asset's root location." )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"], 'documentation:url', 'file:///home/michaeldu/dev/gafferDependencies-0.52.0.0-linux/doc/gaffer/html/Reference/NodeReference/Gaffer/Box.html' )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"], 'nodeGadget:color', imath.Color3f( 0.968999982, 0.576008201, 0.118000001 ) )
__children["mySurfaceShaders"]["BoxIn"]["__in"].setInput( __children["mySurfaceShaders"]["in"] )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["BoxIn"]["__in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["BoxIn"]["__in"], 'description', 'The processed output scene.' )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["BoxIn"]["__in"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
__children["mySurfaceShaders"]["BoxIn"]["__uiPosition"].setValue( imath.V2f( -8.4191494, 4.74036694 ) )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["in"], 'description', 'The processed output scene.' )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["in"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["in"], 'noduleLayout:section', 'top' )
__children["mySurfaceShaders"]["BoxOut"]["in"].setInput( __children["mySurfaceShaders"]["ShaderAssignment"]["out"] )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["BoxOut"]["in"], 'noduleLayout:section', 'top' )
__children["mySurfaceShaders"]["BoxOut"]["passThrough"].setInput( __children["mySurfaceShaders"]["BoxIn"]["out"] )
__children["mySurfaceShaders"]["BoxOut"]["enabled"].setInput( __children["mySurfaceShaders"]["enabled"] )
__children["mySurfaceShaders"]["BoxOut"]["__uiPosition"].setValue( imath.V2f( -5.41914892, -20.0877571 ) )
__children["mySurfaceShaders"]["out"].setInput( __children["mySurfaceShaders"]["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["out"], 'description', 'The input scene' )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["out"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["out"], 'noduleLayout:spacing', 2.0 )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["out"], 'noduleLayout:section', 'bottom' )
__children["mySurfaceShaders"]["Group"]["in"]["in0"].setInput( __children["mySurfaceShaders"]["BoxIn"]["out"] )
__children["mySurfaceShaders"]["Group"]["__uiPosition"].setValue( imath.V2f( -6.91914892, -3.59166431 ) )
__children["mySurfaceShaders"]["ShaderAssignment"]["in"].setInput( __children["mySurfaceShaders"]["Group"]["out"] )
__children["mySurfaceShaders"]["ShaderAssignment"]["filter"].setInput( __children["mySurfaceShaders"]["BoxIn1"]["out"] )
__children["mySurfaceShaders"]["ShaderAssignment"]["shader"].setInput( __children["mySurfaceShaders"]["as_disney_material"]["out"] )
__children["mySurfaceShaders"]["ShaderAssignment"]["__uiPosition"].setValue( imath.V2f( -6.91914892, -11.7557259 ) )
__children["mySurfaceShaders"]["BoxIn1"]["name"].setValue( 'filter' )
__children["mySurfaceShaders"]["BoxIn1"]["__in"].setInput( __children["mySurfaceShaders"]["filter"] )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["BoxIn1"]["__in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["BoxIn1"]["__in"], 'description', 'The filter used to control which parts of the scene are\nprocessed. A Filter node should be connected here.' )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["BoxIn1"]["__in"], 'noduleLayout:section', 'right' )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["BoxIn1"]["__in"], 'plugValueWidget:type', 'GafferSceneUI.FilterPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["BoxIn1"]["__in"], 'nodule:color', imath.Color3f( 0.689999998, 0.537800014, 0.228300005 ) )
__children["mySurfaceShaders"]["BoxIn1"]["__uiPosition"].setValue( imath.V2f( 5.66628075, -5.505723 ) )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["filter"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["filter"], 'description', 'The filter used to control which parts of the scene are\nprocessed. A Filter node should be connected here.' )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["filter"], 'noduleLayout:section', 'right' )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["filter"], 'plugValueWidget:type', 'GafferSceneUI.FilterPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["filter"], 'nodule:color', imath.Color3f( 0.689999998, 0.537800014, 0.228300005 ) )
__children["mySurfaceShaders"]["as_disney_material"]["parameters"]["BaseColor"].setInput( __children["mySurfaceShaders"]["BoxIn2"]["out"] )
__children["mySurfaceShaders"]["as_disney_material"]["parameters"]["BaseColor"]["r"].setInput( __children["mySurfaceShaders"]["BoxIn2"]["out"]["r"] )
__children["mySurfaceShaders"]["as_disney_material"]["parameters"]["BaseColor"]["g"].setInput( __children["mySurfaceShaders"]["BoxIn2"]["out"]["g"] )
__children["mySurfaceShaders"]["as_disney_material"]["parameters"]["BaseColor"]["b"].setInput( __children["mySurfaceShaders"]["BoxIn2"]["out"]["b"] )
__children["mySurfaceShaders"]["as_disney_material"]["__uiPosition"].setValue( imath.V2f( -24.4778862, -11.7557364 ) )
__children["mySurfaceShaders"]["BoxIn2"]["name"].setValue( 'textures' )
__children["mySurfaceShaders"]["BoxIn2"]["__in"].setInput( __children["mySurfaceShaders"]["textures"] )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["BoxIn2"]["__in"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["BoxIn2"]["__in"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["BoxIn2"]["__in"], 'nodule:color', imath.Color3f( 0.689999998, 0.537800014, 0.228300005 ) )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["BoxIn2"]["__in"], 'description', '' )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["BoxIn2"]["__in"], 'label', None )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["BoxIn2"]["__in"], 'noduleLayout:label', None )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["BoxIn2"]["__in"], 'presetNames', None )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["BoxIn2"]["__in"], 'presetValues', None )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["BoxIn2"]["__in"], 'plugValueWidget:type', None )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["BoxIn2"]["__in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["BoxIn2"]["__in"], 'noduleLayout:visible', True )
__children["mySurfaceShaders"]["BoxIn2"]["__in"]["r"].setInput( __children["mySurfaceShaders"]["textures"]["r"] )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["BoxIn2"]["__in"]["r"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["BoxIn2"]["__in"]["r"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["BoxIn2"]["__in"]["r"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
__children["mySurfaceShaders"]["BoxIn2"]["__in"]["g"].setInput( __children["mySurfaceShaders"]["textures"]["g"] )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["BoxIn2"]["__in"]["g"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["BoxIn2"]["__in"]["g"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["BoxIn2"]["__in"]["g"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
__children["mySurfaceShaders"]["BoxIn2"]["__in"]["b"].setInput( __children["mySurfaceShaders"]["textures"]["b"] )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["BoxIn2"]["__in"]["b"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["BoxIn2"]["__in"]["b"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["BoxIn2"]["__in"]["b"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
__children["mySurfaceShaders"]["BoxIn2"]["__uiPosition"].setValue( imath.V2f( -38.0484238, -0.705736518 ) )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["textures"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["textures"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["textures"], 'nodule:color', imath.Color3f( 0.689999998, 0.537800014, 0.228300005 ) )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["textures"], 'description', '' )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["textures"], 'noduleLayout:label', None )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["textures"], 'presetNames', None )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["textures"], 'presetValues', None )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["textures"], 'plugValueWidget:type', None )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["textures"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["textures"], 'noduleLayout:visible', True )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["textures"]["r"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["textures"]["r"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["textures"]["r"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["textures"]["g"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["textures"]["g"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["textures"]["g"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["textures"]["b"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["textures"]["b"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["mySurfaceShaders"]["textures"]["b"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )


del __children
