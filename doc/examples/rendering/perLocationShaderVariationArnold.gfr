import Gaffer
import GafferArnold
import GafferImage
import GafferOSL
import GafferScene
import IECore
import imath

Gaffer.Metadata.registerValue( parent, "serialiser:milestoneVersion", 1, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:majorVersion", 3, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:minorVersion", 13, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:patchVersion", 1, persistent=False )

__children = {}

parent["variables"].addChild( Gaffer.NameValuePlug( "image:catalogue:port", Gaffer.IntPlug( "value", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "imageCataloguePort", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
parent["variables"].addChild( Gaffer.NameValuePlug( "project:name", Gaffer.StringPlug( "value", defaultValue = 'default', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "projectName", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
parent["variables"].addChild( Gaffer.NameValuePlug( "project:rootDirectory", Gaffer.StringPlug( "value", defaultValue = '$HOME/gaffer/projects/${project:name}', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "projectRootDirectory", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["defaultFormat"] = GafferImage.FormatPlug( "defaultFormat", defaultValue = GafferImage.Format( 1920, 1080, 1.000 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["defaultFormat"] )
__children["Catalogue"] = GafferImage.Catalogue( "Catalogue" )
parent.addChild( __children["Catalogue"] )
__children["Catalogue"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["StandardSurface_Cow"] = GafferArnold.ArnoldShader( "StandardSurface_Cow" )
parent.addChild( __children["StandardSurface_Cow"] )
__children["StandardSurface_Cow"].loadShader( "standard_surface" )
__children["StandardSurface_Cow"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ShaderAssignment_Cow"] = GafferScene.ShaderAssignment( "ShaderAssignment_Cow" )
parent.addChild( __children["ShaderAssignment_Cow"] )
__children["ShaderAssignment_Cow"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PathFilter"] = GafferScene.PathFilter( "PathFilter" )
parent.addChild( __children["PathFilter"] )
__children["PathFilter"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["UserDataRgb"] = GafferArnold.ArnoldShader( "UserDataRgb" )
parent.addChild( __children["UserDataRgb"] )
__children["UserDataRgb"].loadShader( "user_data_rgb" )
__children["UserDataRgb"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop"] = Gaffer.Backdrop( "Backdrop" )
parent.addChild( __children["Backdrop"] )
__children["Backdrop"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["CustomAttributes"] = GafferScene.CustomAttributes( "CustomAttributes" )
parent.addChild( __children["CustomAttributes"] )
__children["CustomAttributes"]["attributes"].addChild( Gaffer.NameValuePlug( "", Gaffer.Color3fPlug( "value", defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), True, "member1", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["CustomAttributes"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Random_color"] = Gaffer.Random( "Random_color" )
parent.addChild( __children["Random_color"] )
__children["Random_color"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop1"] = Gaffer.Backdrop( "Backdrop1" )
parent.addChild( __children["Backdrop1"] )
__children["Backdrop1"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PathFilter4"] = GafferScene.PathFilter( "PathFilter4" )
parent.addChild( __children["PathFilter4"] )
__children["PathFilter4"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OtherShadersAndRenderOptions"] = Gaffer.Box( "OtherShadersAndRenderOptions" )
parent.addChild( __children["OtherShadersAndRenderOptions"] )
__children["OtherShadersAndRenderOptions"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OtherShadersAndRenderOptions"].addChild( Gaffer.BoxIn( "BoxIn" ) )
__children["OtherShadersAndRenderOptions"]["BoxIn"].setup( GafferScene.ScenePlug( "out", ) )
__children["OtherShadersAndRenderOptions"]["BoxIn"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OtherShadersAndRenderOptions"].addChild( GafferScene.ScenePlug( "in", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OtherShadersAndRenderOptions"].addChild( Gaffer.BoxOut( "BoxOut" ) )
__children["OtherShadersAndRenderOptions"]["BoxOut"].setup( GafferScene.ScenePlug( "in", ) )
__children["OtherShadersAndRenderOptions"]["BoxOut"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OtherShadersAndRenderOptions"].addChild( GafferScene.ScenePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OtherShadersAndRenderOptions"].addChild( GafferScene.ShaderAssignment( "ShaderAssignment_Ground" ) )
__children["OtherShadersAndRenderOptions"]["ShaderAssignment_Ground"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OtherShadersAndRenderOptions"].addChild( GafferScene.PathFilter( "PathFilter3" ) )
__children["OtherShadersAndRenderOptions"]["PathFilter3"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OtherShadersAndRenderOptions"].addChild( GafferArnold.ArnoldShader( "StandardSurface_GrassShader" ) )
__children["OtherShadersAndRenderOptions"]["StandardSurface_GrassShader"].loadShader( "standard_surface" )
__children["OtherShadersAndRenderOptions"]["StandardSurface_GrassShader"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OtherShadersAndRenderOptions"].addChild( GafferScene.Outputs( "Outputs" ) )
__children["OtherShadersAndRenderOptions"]["Outputs"]["outputs"].addChild( Gaffer.ValuePlug( "output1", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OtherShadersAndRenderOptions"]["Outputs"]["outputs"]["output1"].addChild( Gaffer.StringPlug( "name", defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OtherShadersAndRenderOptions"]["Outputs"]["outputs"]["output1"].addChild( Gaffer.BoolPlug( "active", defaultValue = True, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OtherShadersAndRenderOptions"]["Outputs"]["outputs"]["output1"].addChild( Gaffer.StringPlug( "fileName", defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OtherShadersAndRenderOptions"]["Outputs"]["outputs"]["output1"].addChild( Gaffer.StringPlug( "type", defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OtherShadersAndRenderOptions"]["Outputs"]["outputs"]["output1"].addChild( Gaffer.StringPlug( "data", defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OtherShadersAndRenderOptions"]["Outputs"]["outputs"]["output1"].addChild( Gaffer.CompoundDataPlug( "parameters", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OtherShadersAndRenderOptions"]["Outputs"]["outputs"]["output1"]["parameters"].addChild( Gaffer.NameValuePlug( "remoteDisplayType", Gaffer.StringPlug( "value", defaultValue = 'GafferImage::GafferDisplayDriver', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "remoteDisplayType", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["OtherShadersAndRenderOptions"]["Outputs"]["outputs"]["output1"]["parameters"].addChild( Gaffer.NameValuePlug( "displayHost", Gaffer.StringPlug( "value", defaultValue = 'localhost', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "displayHost", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["OtherShadersAndRenderOptions"]["Outputs"]["outputs"]["output1"]["parameters"].addChild( Gaffer.NameValuePlug( "driverType", Gaffer.StringPlug( "value", defaultValue = 'ClientDisplayDriver', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "driverType", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["OtherShadersAndRenderOptions"]["Outputs"]["outputs"]["output1"]["parameters"].addChild( Gaffer.NameValuePlug( "displayPort", Gaffer.StringPlug( "value", defaultValue = '${image:catalogue:port}', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "displayPort", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["OtherShadersAndRenderOptions"]["Outputs"]["outputs"]["output1"]["parameters"].addChild( Gaffer.NameValuePlug( "quantize", Gaffer.IntVectorDataPlug( "value", defaultValue = IECore.IntVectorData( [ 0, 0, 0, 0 ] ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "quantize", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["OtherShadersAndRenderOptions"]["Outputs"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OtherShadersAndRenderOptions"].addChild( GafferScene.StandardOptions( "StandardOptions" ) )
__children["OtherShadersAndRenderOptions"]["StandardOptions"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OtherShadersAndRenderOptions"].addChild( GafferArnold.ArnoldOptions( "ArnoldOptions" ) )
__children["OtherShadersAndRenderOptions"]["ArnoldOptions"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop9"] = Gaffer.Backdrop( "Backdrop9" )
parent.addChild( __children["Backdrop9"] )
__children["Backdrop9"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop9"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop2"] = Gaffer.Backdrop( "Backdrop2" )
parent.addChild( __children["Backdrop2"] )
__children["Backdrop2"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop2"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["AttributeVisualiser"] = GafferScene.AttributeVisualiser( "AttributeVisualiser" )
parent.addChild( __children["AttributeVisualiser"] )
__children["AttributeVisualiser"]["ramp"].clearPoints()
__children["AttributeVisualiser"]["ramp"].addChild( Gaffer.ValuePlug( "p0", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["AttributeVisualiser"]["ramp"]["p0"].addChild( Gaffer.FloatPlug( "x", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["AttributeVisualiser"]["ramp"]["p0"].addChild( Gaffer.Color3fPlug( "y", defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["AttributeVisualiser"]["ramp"].addChild( Gaffer.ValuePlug( "p1", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["AttributeVisualiser"]["ramp"]["p1"].addChild( Gaffer.FloatPlug( "x", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["AttributeVisualiser"]["ramp"]["p1"].addChild( Gaffer.Color3fPlug( "y", defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["AttributeVisualiser"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Dot"] = Gaffer.Dot( "Dot" )
parent.addChild( __children["Dot"] )
__children["Dot"].setup( GafferScene.ScenePlug( "in", ) )
__children["Dot"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop3"] = Gaffer.Backdrop( "Backdrop3" )
parent.addChild( __children["Backdrop3"] )
__children["Backdrop3"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop3"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"] = Gaffer.Box( "Scene" )
parent.addChild( __children["Scene"] )
__children["Scene"].addChild( GafferScene.Camera( "Camera" ) )
__children["Scene"]["Camera"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"].addChild( GafferScene.Plane( "Plane_Ground" ) )
__children["Scene"]["Plane_Ground"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"].addChild( GafferScene.Group( "Group" ) )
__children["Scene"]["Group"]["in"].addChild( GafferScene.ScenePlug( "in1", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["Group"]["in"].addChild( GafferScene.ScenePlug( "in2", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["Group"]["in"].addChild( GafferScene.ScenePlug( "in3", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["Group"]["in"].addChild( GafferScene.ScenePlug( "in4", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["Group"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"].addChild( GafferScene.ScenePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"].addChild( GafferArnold.ArnoldShader( "physical_sky" ) )
__children["Scene"]["physical_sky"].loadShader( "physical_sky" )
__children["Scene"]["physical_sky"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"].addChild( GafferArnold.ArnoldLight( "skydome_light" ) )
__children["Scene"]["skydome_light"].loadShader( "skydome_light" )
__children["Scene"]["skydome_light"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"].addChild( Gaffer.Box( "CowField" ) )
__children["Scene"]["CowField"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["CowField"].addChild( GafferScene.SceneReader( "SceneReader_Cows" ) )
__children["Scene"]["CowField"]["SceneReader_Cows"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["CowField"].addChild( GafferScene.Instancer( "Instancer" ) )
__children["Scene"]["CowField"]["Instancer"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["CowField"].addChild( GafferScene.Plane( "Plane_InstanceSource" ) )
__children["Scene"]["CowField"]["Plane_InstanceSource"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["CowField"].addChild( GafferScene.SubTree( "SubTree" ) )
__children["Scene"]["CowField"]["SubTree"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["CowField"].addChild( GafferScene.FreezeTransform( "FreezeTransform" ) )
__children["Scene"]["CowField"]["FreezeTransform"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["CowField"].addChild( GafferScene.PathFilter( "PathFilter6" ) )
__children["Scene"]["CowField"]["PathFilter6"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["CowField"].addChild( Gaffer.Backdrop( "Backdrop" ) )
__children["Scene"]["CowField"]["Backdrop"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["CowField"]["Backdrop"].addChild( Gaffer.Box2fPlug( "__uiBound1", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["CowField"]["Backdrop"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["CowField"].addChild( Gaffer.Backdrop( "Backdrop1" ) )
__children["Scene"]["CowField"]["Backdrop1"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["CowField"]["Backdrop1"].addChild( Gaffer.Box2fPlug( "__uiBound1", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["CowField"]["Backdrop1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["CowField"].addChild( GafferScene.Transform( "Transform" ) )
__children["Scene"]["CowField"]["Transform"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["CowField"].addChild( GafferScene.PathFilter( "PathFilter4" ) )
__children["Scene"]["CowField"]["PathFilter4"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["CowField"].addChild( Gaffer.Random( "randomizeRotation" ) )
__children["Scene"]["CowField"]["randomizeRotation"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["CowField"].addChild( Gaffer.Random( "randomizeZ" ) )
__children["Scene"]["CowField"]["randomizeZ"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["CowField"].addChild( Gaffer.Random( "randomizeX" ) )
__children["Scene"]["CowField"]["randomizeX"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["CowField"].addChild( Gaffer.Backdrop( "Backdrop3" ) )
__children["Scene"]["CowField"]["Backdrop3"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["CowField"]["Backdrop3"].addChild( Gaffer.Box2fPlug( "__uiBound1", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["CowField"]["Backdrop3"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["CowField"].addChild( Gaffer.Expression( "Expression" ) )
__children["Scene"]["CowField"]["Expression"]["__in"].addChild( Gaffer.V2fPlug( "p0", defaultValue = imath.V2f( 0, 1 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["CowField"]["Expression"]["__out"].addChild( Gaffer.V2fPlug( "p0", direction = Gaffer.Plug.Direction.Out, defaultValue = imath.V2f( 0, 1 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["CowField"]["Expression"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["CowField"].addChild( Gaffer.BoxOut( "BoxOut" ) )
__children["Scene"]["CowField"]["BoxOut"].setup( GafferScene.ScenePlug( "in", ) )
__children["Scene"]["CowField"]["BoxOut"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"]["CowField"].addChild( GafferScene.ScenePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"].addChild( Gaffer.BoxOut( "BoxOut" ) )
__children["Scene"]["BoxOut"].setup( GafferScene.ScenePlug( "in", ) )
__children["Scene"]["BoxOut"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Scene"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop10"] = Gaffer.Backdrop( "Backdrop10" )
parent.addChild( __children["Backdrop10"] )
__children["Backdrop10"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop10"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Goal"] = Gaffer.Backdrop( "Goal" )
parent.addChild( __children["Goal"] )
__children["Goal"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Goal"].addChild( Gaffer.Box2fPlug( "__uiBound1", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Goal"].addChild( Gaffer.Box2fPlug( "__uiBound2", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Goal"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PathFilter5"] = GafferScene.PathFilter( "PathFilter5" )
parent.addChild( __children["PathFilter5"] )
__children["PathFilter5"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop4"] = Gaffer.Backdrop( "Backdrop4" )
parent.addChild( __children["Backdrop4"] )
__children["Backdrop4"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop4"].addChild( Gaffer.Box2fPlug( "__uiBound1", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop4"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop5"] = Gaffer.Backdrop( "Backdrop5" )
parent.addChild( __children["Backdrop5"] )
__children["Backdrop5"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop5"].addChild( Gaffer.Box2fPlug( "__uiBound1", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop5"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Noise"] = GafferOSL.OSLShader( "Noise" )
parent.addChild( __children["Noise"] )
__children["Noise"].loadShader( "Pattern/Noise" )
__children["Noise"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MixColor"] = GafferOSL.OSLShader( "MixColor" )
parent.addChild( __children["MixColor"] )
__children["MixColor"].loadShader( "Maths/MixColor" )
__children["MixColor"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop6"] = Gaffer.Backdrop( "Backdrop6" )
parent.addChild( __children["Backdrop6"] )
__children["Backdrop6"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop6"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop8"] = Gaffer.Backdrop( "Backdrop8" )
parent.addChild( __children["Backdrop8"] )
__children["Backdrop8"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop8"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop7"] = Gaffer.Backdrop( "Backdrop7" )
parent.addChild( __children["Backdrop7"] )
__children["Backdrop7"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop7"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["RemapFloat"] = GafferOSL.OSLShader( "RemapFloat" )
parent.addChild( __children["RemapFloat"] )
__children["RemapFloat"].loadShader( "Utility/RemapFloat" )
__children["RemapFloat"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["openColorIO"] = GafferImage.OpenColorIOConfigPlug( "openColorIO", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["openColorIO"] )
__children["InteractiveRender"] = GafferScene.InteractiveRender( "InteractiveRender" )
parent.addChild( __children["InteractiveRender"] )
__children["InteractiveRender"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
parent["frame"].setValue( 47.0 )
parent["variables"]["imageCataloguePort"]["value"].setValue( 35411 )
Gaffer.Metadata.registerValue( parent["variables"]["imageCataloguePort"], 'readOnly', True )
Gaffer.Metadata.registerValue( parent["variables"]["projectName"]["name"], 'readOnly', True )
Gaffer.Metadata.registerValue( parent["variables"]["projectRootDirectory"]["name"], 'readOnly', True )
__children["Catalogue"]["directory"].setValue( '${project:rootDirectory}/catalogues/examples/perLocationShaderVariation' )
__children["Catalogue"]["__uiPosition"].setValue( imath.V2f( -50.7669296, -76.3563004 ) )
__children["StandardSurface_Cow"]["parameters"]["base_color"].setInput( __children["MixColor"]["out"]["out"] )
__children["StandardSurface_Cow"]["__uiPosition"].setValue( imath.V2f( -70.1211395, -40.9893379 ) )
__children["ShaderAssignment_Cow"]["in"].setInput( __children["Dot"]["out"] )
__children["ShaderAssignment_Cow"]["filter"].setInput( __children["PathFilter"]["out"] )
__children["ShaderAssignment_Cow"]["shader"].setInput( __children["StandardSurface_Cow"]["out"] )
__children["ShaderAssignment_Cow"]["__uiPosition"].setValue( imath.V2f( -51.0558319, -40.9893379 ) )
__children["PathFilter"]["paths"].setValue( IECore.StringVectorData( [ '/world/cow/*' ] ) )
__children["PathFilter"]["__uiPosition"].setValue( imath.V2f( -37.5666618, -32.9403458 ) )
__children["UserDataRgb"]["parameters"]["attribute"].setValue( 'user:colorVariation' )
__children["UserDataRgb"]["__uiPosition"].setValue( imath.V2f( -108.897186, -24.2910194 ) )
__children["Backdrop"]["title"].setValue( 'Reading the color' )
__children["Backdrop"]["description"].setValue( "This UserDataRgb shader node reads the location's attributes at render time. Arnold has a version of this node for each common data type. For this node's Attribute plug, all we need to do is insert the name of the attribute created by the CustomAttributes node." )
__children["Backdrop"]["__uiBound"].setValue( imath.Box2f( imath.V2f( -11.791748, -13.8779392 ), imath.V2f( 42.7195969, 11.0820312 ) ) )
__children["Backdrop"]["__uiPosition"].setValue( imath.V2f( -111.24025, -15.1080914 ) )
__children["CustomAttributes"]["in"].setInput( __children["Scene"]["out"] )
__children["CustomAttributes"]["filter"].setInput( __children["PathFilter4"]["out"] )
__children["CustomAttributes"]["attributes"]["member1"]["name"].setValue( 'user:colorVariation' )
__children["CustomAttributes"]["attributes"]["member1"]["value"].setInput( __children["Random_color"]["outColor"] )
__children["CustomAttributes"]["__uiPosition"].setValue( imath.V2f( -51.0518265, 25.1788807 ) )
__children["Random_color"]["seedVariable"].setValue( 'scene:path' )
__children["Random_color"]["baseColor"].setValue( imath.Color3f( 0.100000001, 0.0500000007, 0.0500000007 ) )
__children["Random_color"]["hue"].setValue( 0.5 )
__children["Random_color"]["value"].setValue( 0.10000000149011612 )
__children["Random_color"]["__uiPosition"].setValue( imath.V2f( -64.4071121, 25.2104912 ) )
__children["Backdrop1"]["title"].setValue( '' )
__children["Backdrop1"]["__uiBound"].setValue( imath.Box2f( imath.V2f( -10, -38.5993881 ), imath.V2f( 86.4300003, 9.48580933 ) ) )
__children["Backdrop1"]["__uiPosition"].setValue( imath.V2f( -113.089149, 38.378643 ) )
__children["PathFilter4"]["paths"].setValue( IECore.StringVectorData( [ '/world/cow/*' ] ) )
__children["PathFilter4"]["__uiPosition"].setValue( imath.V2f( -36.306469, 31.8555126 ) )
__children["OtherShadersAndRenderOptions"]["__uiPosition"].setValue( imath.V2f( -49.5558319, -58.8628845 ) )
__children["OtherShadersAndRenderOptions"]["BoxIn"]["__in"].setInput( __children["OtherShadersAndRenderOptions"]["in"] )
Gaffer.Metadata.registerValue( __children["OtherShadersAndRenderOptions"]["BoxIn"]["__in"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["OtherShadersAndRenderOptions"]["BoxIn"]["__in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["OtherShadersAndRenderOptions"]["BoxIn"]["__in"], 'description', 'The processed output scene.' )
Gaffer.Metadata.registerValue( __children["OtherShadersAndRenderOptions"]["BoxIn"]["out"], 'noduleLayout:section', 'bottom' )
__children["OtherShadersAndRenderOptions"]["BoxIn"]["__uiPosition"].setValue( imath.V2f( 0.793976367, 56.8879089 ) )
__children["OtherShadersAndRenderOptions"]["in"].setInput( __children["ShaderAssignment_Cow"]["out"] )
Gaffer.Metadata.registerValue( __children["OtherShadersAndRenderOptions"]["in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["OtherShadersAndRenderOptions"]["in"], 'description', 'The processed output scene.' )
Gaffer.Metadata.registerValue( __children["OtherShadersAndRenderOptions"]["in"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["OtherShadersAndRenderOptions"]["in"], 'noduleLayout:section', 'top' )
__children["OtherShadersAndRenderOptions"]["BoxOut"]["in"].setInput( __children["OtherShadersAndRenderOptions"]["ArnoldOptions"]["out"] )
Gaffer.Metadata.registerValue( __children["OtherShadersAndRenderOptions"]["BoxOut"]["in"], 'noduleLayout:section', 'top' )
Gaffer.Metadata.registerValue( __children["OtherShadersAndRenderOptions"]["BoxOut"]["__out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["OtherShadersAndRenderOptions"]["BoxOut"]["__out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["OtherShadersAndRenderOptions"]["BoxOut"]["__out"], 'description', 'The input scene' )
Gaffer.Metadata.registerValue( __children["OtherShadersAndRenderOptions"]["BoxOut"]["__out"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["OtherShadersAndRenderOptions"]["BoxOut"]["__out"], 'noduleLayout:spacing', 2.0 )
__children["OtherShadersAndRenderOptions"]["BoxOut"]["__uiPosition"].setValue( imath.V2f( 2.29397631, 0.190315247 ) )
__children["OtherShadersAndRenderOptions"]["out"].setInput( __children["OtherShadersAndRenderOptions"]["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["OtherShadersAndRenderOptions"]["out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["OtherShadersAndRenderOptions"]["out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["OtherShadersAndRenderOptions"]["out"], 'description', 'The input scene' )
Gaffer.Metadata.registerValue( __children["OtherShadersAndRenderOptions"]["out"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["OtherShadersAndRenderOptions"]["out"], 'noduleLayout:spacing', 2.0 )
Gaffer.Metadata.registerValue( __children["OtherShadersAndRenderOptions"]["out"], 'noduleLayout:section', 'bottom' )
__children["OtherShadersAndRenderOptions"]["ShaderAssignment_Ground"]["in"].setInput( __children["OtherShadersAndRenderOptions"]["BoxIn"]["out"] )
__children["OtherShadersAndRenderOptions"]["ShaderAssignment_Ground"]["filter"].setInput( __children["OtherShadersAndRenderOptions"]["PathFilter3"]["out"] )
__children["OtherShadersAndRenderOptions"]["ShaderAssignment_Ground"]["shader"].setInput( __children["OtherShadersAndRenderOptions"]["StandardSurface_GrassShader"]["out"] )
__children["OtherShadersAndRenderOptions"]["ShaderAssignment_Ground"]["__uiPosition"].setValue( imath.V2f( 0.793976426, 43.2797699 ) )
__children["OtherShadersAndRenderOptions"]["PathFilter3"]["paths"].setValue( IECore.StringVectorData( [ '/world/ground' ] ) )
__children["OtherShadersAndRenderOptions"]["PathFilter3"]["__uiPosition"].setValue( imath.V2f( 14.3323841, 48.8471031 ) )
__children["OtherShadersAndRenderOptions"]["StandardSurface_GrassShader"]["parameters"]["base_color"].setValue( imath.Color3f( 0.0345000066, 0.119999997, 0.0299999993 ) )
__children["OtherShadersAndRenderOptions"]["StandardSurface_GrassShader"]["parameters"]["specular"].setValue( 0.0 )
__children["OtherShadersAndRenderOptions"]["StandardSurface_GrassShader"]["__uiPosition"].setValue( imath.V2f( -20.1758461, 43.2797699 ) )
__children["OtherShadersAndRenderOptions"]["Outputs"]["in"].setInput( __children["OtherShadersAndRenderOptions"]["StandardOptions"]["out"] )
__children["OtherShadersAndRenderOptions"]["Outputs"]["outputs"]["output1"]["name"].setValue( 'Interactive/Beauty' )
__children["OtherShadersAndRenderOptions"]["Outputs"]["outputs"]["output1"]["fileName"].setValue( 'beauty' )
__children["OtherShadersAndRenderOptions"]["Outputs"]["outputs"]["output1"]["type"].setValue( 'ieDisplay' )
__children["OtherShadersAndRenderOptions"]["Outputs"]["outputs"]["output1"]["data"].setValue( 'rgba' )
__children["OtherShadersAndRenderOptions"]["Outputs"]["__uiPosition"].setValue( imath.V2f( 0.793976307, 19.9478645 ) )
__children["OtherShadersAndRenderOptions"]["StandardOptions"]["in"].setInput( __children["OtherShadersAndRenderOptions"]["ShaderAssignment_Ground"]["out"] )
__children["OtherShadersAndRenderOptions"]["StandardOptions"]["options"]["renderCamera"]["value"].setValue( '/world/camera' )
__children["OtherShadersAndRenderOptions"]["StandardOptions"]["options"]["renderCamera"]["enabled"].setValue( True )
__children["OtherShadersAndRenderOptions"]["StandardOptions"]["options"]["renderResolution"]["value"].setValue( imath.V2i( 1024, 1024 ) )
__children["OtherShadersAndRenderOptions"]["StandardOptions"]["options"]["renderResolution"]["enabled"].setValue( True )
__children["OtherShadersAndRenderOptions"]["StandardOptions"]["__uiPosition"].setValue( imath.V2f( 0.797981739, 26.4575691 ) )
__children["OtherShadersAndRenderOptions"]["ArnoldOptions"]["in"].setInput( __children["OtherShadersAndRenderOptions"]["Outputs"]["out"] )
__children["OtherShadersAndRenderOptions"]["ArnoldOptions"]["options"]["aaSamples"]["value"].setValue( 16 )
__children["OtherShadersAndRenderOptions"]["ArnoldOptions"]["options"]["aaSamples"]["enabled"].setValue( True )
__children["OtherShadersAndRenderOptions"]["ArnoldOptions"]["__uiPosition"].setValue( imath.V2f( 0.793976307, 14.283802 ) )
Gaffer.Metadata.registerValue( __children["Backdrop9"], 'nodeGadget:color', imath.Color3f( 0.347949386, 0.438627928, 0.5 ) )
__children["Backdrop9"]["title"].setValue( '' )
__children["Backdrop9"]["__uiBound"].setValue( imath.Box2f( imath.V2f( 0, 0 ), imath.V2f( 46, 20 ) ) )
__children["Backdrop9"]["__uiPosition"].setValue( imath.V2f( -114, -76 ) )
Gaffer.Metadata.registerValue( __children["Backdrop2"], 'nodeGadget:color', imath.Color3f( 0.347949386, 0.438627928, 0.5 ) )
__children["Backdrop2"]["title"].setValue( 'Note: Renderers and attribute order' )
__children["Backdrop2"]["description"].setValue( "Because the renderer reads a location's attributes only at render time, it's actually not necessary to place the CustomAttributes node before the Shader Assignment. All that matters is that the attributes are merely present in the scene by render time! This gives you some flexibility in ordering operations in your shader pipeline." )
__children["Backdrop2"]["__uiBound"].setValue( imath.Box2f( imath.V2f( 0, 0 ), imath.V2f( 40, 20 ) ) )
__children["Backdrop2"]["__uiPosition"].setValue( imath.V2f( -111, -76 ) )
__children["AttributeVisualiser"]["in"].setInput( __children["Dot"]["out"] )
__children["AttributeVisualiser"]["filter"].setInput( __children["PathFilter5"]["out"] )
__children["AttributeVisualiser"]["attributeName"].setValue( 'user:colorVariation' )
__children["AttributeVisualiser"]["max"].setValue( 0.15000000596046448 )
__children["AttributeVisualiser"]["ramp"]["p0"]["y"].setValue( imath.Color3f( 1, 0, 0 ) )
__children["AttributeVisualiser"]["ramp"]["p1"]["x"].setValue( 1.0 )
__children["AttributeVisualiser"]["ramp"]["p1"]["y"].setValue( imath.Color3f( 0, 1, 0 ) )
__children["AttributeVisualiser"]["__uiPosition"].setValue( imath.V2f( -35.0755615, -17.6140671 ) )
__children["Dot"]["in"].setInput( __children["CustomAttributes"]["out"] )
__children["Dot"]["__uiPosition"].setValue( imath.V2f( -51.0518265, -10.2820349 ) )
Gaffer.Metadata.registerValue( __children["Backdrop3"], 'nodeGadget:color', imath.Color3f( 0.300000012, 0.5, 0.460500002 ) )
__children["Backdrop3"]["title"].setValue( '' )
__children["Backdrop3"]["__uiBound"].setValue( imath.Box2f( imath.V2f( -18.829668, -7.12954807 ), imath.V2f( 47.5999985, 10.5616188 ) ) )
__children["Backdrop3"]["__uiPosition"].setValue( imath.V2f( -26.6455822, -16.5875797 ) )
__children["Scene"]["Camera"]["transform"]["translate"].setValue( imath.V3f( 11.3540936, 20.0672684, 15.6733675 ) )
__children["Scene"]["Camera"]["transform"]["rotate"].setValue( imath.V3f( 77.5772858, 86.1261597, 145.680573 ) )
__children["Scene"]["Camera"]["fieldOfView"].setValue( 90.0 )
__children["Scene"]["Camera"]["__uiPosition"].setValue( imath.V2f( -47.5090446, 80.6402206 ) )
__children["Scene"]["Plane_Ground"]["name"].setValue( 'ground' )
__children["Scene"]["Plane_Ground"]["transform"]["rotate"].setValue( imath.V3f( -90, 0, 0 ) )
__children["Scene"]["Plane_Ground"]["dimensions"].setValue( imath.V2f( 100, 100 ) )
__children["Scene"]["Plane_Ground"]["__uiPosition"].setValue( imath.V2f( -57.1448402, 73.2975235 ) )
__children["Scene"]["Group"]["in"][0].setInput( __children["Scene"]["CowField"]["out"] )
__children["Scene"]["Group"]["in"][1].setInput( __children["Scene"]["Plane_Ground"]["out"] )
__children["Scene"]["Group"]["in"][2].setInput( __children["Scene"]["Camera"]["out"] )
__children["Scene"]["Group"]["in"][3].setInput( __children["Scene"]["skydome_light"]["out"] )
__children["Scene"]["Group"]["name"].setValue( 'world' )
__children["Scene"]["Group"]["__uiPosition"].setValue( imath.V2f( -51.0518265, 53.0469971 ) )
__children["Scene"]["out"].setInput( __children["Scene"]["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["Scene"]["out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["Scene"]["out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["Scene"]["out"], 'description', 'The processed output scene.' )
__children["Scene"]["physical_sky"]["parameters"]["turbidity"].setValue( 10.0 )
__children["Scene"]["physical_sky"]["parameters"]["elevation"].setValue( 25.0 )
__children["Scene"]["physical_sky"]["parameters"]["sun_size"].setValue( 2.0 )
__children["Scene"]["physical_sky"]["parameters"]["sky_tint"].setValue( imath.Color3f( 1, 0.804499984, 0.425000012 ) )
__children["Scene"]["physical_sky"]["parameters"]["intensity"].setValue( 4.0 )
__children["Scene"]["physical_sky"]["__uiPosition"].setValue( imath.V2f( -37.5226669, 72.2347488 ) )
__children["Scene"]["skydome_light"]["parameters"]["color"].setInput( __children["Scene"]["physical_sky"]["out"] )
__children["Scene"]["skydome_light"]["__uiPosition"].setValue( imath.V2f( -37.8227844, 67.7428513 ) )
Gaffer.Metadata.registerValue( __children["Scene"]["CowField"], 'uiEditor:emptySections', IECore.StringVectorData( [  ] ) )
Gaffer.Metadata.registerValue( __children["Scene"]["CowField"], 'uiEditor:emptySectionIndices', IECore.IntVectorData( [  ] ) )
__children["Scene"]["CowField"]["__uiPosition"].setValue( imath.V2f( -64.3224106, 65.2398529 ) )
__children["Scene"]["CowField"]["SceneReader_Cows"]["fileName"].setValue( '${GAFFER_ROOT}/resources/cow/cow.scc' )
__children["Scene"]["CowField"]["SceneReader_Cows"]["transform"]["scale"].setValue( imath.V3f( 0.100000001, 0.100000001, 0.100000001 ) )
__children["Scene"]["CowField"]["SceneReader_Cows"]["__uiPosition"].setValue( imath.V2f( -2.60074711, 18.2161522 ) )
__children["Scene"]["CowField"]["Instancer"]["in"].setInput( __children["Scene"]["CowField"]["FreezeTransform"]["out"] )
__children["Scene"]["CowField"]["Instancer"]["parent"].setValue( '/instancePlane' )
__children["Scene"]["CowField"]["Instancer"]["prototypes"].setInput( __children["Scene"]["CowField"]["SceneReader_Cows"]["out"] )
__children["Scene"]["CowField"]["Instancer"]["__uiPosition"].setValue( imath.V2f( -15.7570734, 10.0520897 ) )
__children["Scene"]["CowField"]["Plane_InstanceSource"]["name"].setValue( 'instancePlane' )
__children["Scene"]["CowField"]["Plane_InstanceSource"]["transform"]["translate"].setValue( imath.V3f( 0, 0, 15.3947353 ) )
__children["Scene"]["CowField"]["Plane_InstanceSource"]["transform"]["rotate"].setValue( imath.V3f( 90, 0, 0 ) )
__children["Scene"]["CowField"]["Plane_InstanceSource"]["dimensions"].setValue( imath.V2f( 75, 75 ) )
__children["Scene"]["CowField"]["Plane_InstanceSource"]["divisions"].setValue( imath.V2i( 20, 20 ) )
__children["Scene"]["CowField"]["Plane_InstanceSource"]["__uiPosition"].setValue( imath.V2f( -17.2570724, 44.8787384 ) )
__children["Scene"]["CowField"]["SubTree"]["in"].setInput( __children["Scene"]["CowField"]["Instancer"]["out"] )
__children["Scene"]["CowField"]["SubTree"]["root"].setValue( '/instancePlane/instances/cow' )
__children["Scene"]["CowField"]["SubTree"]["includeRoot"].setValue( True )
__children["Scene"]["CowField"]["SubTree"]["__uiPosition"].setValue( imath.V2f( -15.7570734, 4.38802719 ) )
__children["Scene"]["CowField"]["FreezeTransform"]["in"].setInput( __children["Scene"]["CowField"]["Plane_InstanceSource"]["out"] )
__children["Scene"]["CowField"]["FreezeTransform"]["filter"].setInput( __children["Scene"]["CowField"]["PathFilter6"]["out"] )
__children["Scene"]["CowField"]["FreezeTransform"]["__uiPosition"].setValue( imath.V2f( -17.2570724, 39.2146759 ) )
__children["Scene"]["CowField"]["PathFilter6"]["paths"].setValue( IECore.StringVectorData( [ '/instancePlane' ] ) )
__children["Scene"]["CowField"]["PathFilter6"]["__uiPosition"].setValue( imath.V2f( -3.15497684, 44.7654877 ) )
__children["Scene"]["CowField"]["Backdrop"]["title"].setValue( 'Source Plane' )
__children["Scene"]["CowField"]["Backdrop"]["description"].setValue( 'Freezing the transformation to a horizontal plane before instancing makes life a lot easier.' )
__children["Scene"]["CowField"]["Backdrop"]["__uiBound"].setValue( imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 33.9298286, 15.6410065 ) ) )
__children["Scene"]["CowField"]["Backdrop"]["__uiPosition"].setValue( imath.V2f( -23.8311081, 44.4343719 ) )
__children["Scene"]["CowField"]["Backdrop1"]["title"].setValue( 'Instance Cows' )
__children["Scene"]["CowField"]["Backdrop1"]["description"].setValue( 'We use the Subtree node to remove the source plane and other intermediate locations.' )
__children["Scene"]["CowField"]["Backdrop1"]["__uiBound"].setValue( imath.Box2f( imath.V2f( -10, -22.65942 ), imath.V2f( 34.1670914, 10 ) ) )
__children["Scene"]["CowField"]["Backdrop1"]["__uiPosition"].setValue( imath.V2f( -24.0090561, 22.3681107 ) )
__children["Scene"]["CowField"]["Transform"]["in"].setInput( __children["Scene"]["CowField"]["SubTree"]["out"] )
__children["Scene"]["CowField"]["Transform"]["filter"].setInput( __children["Scene"]["CowField"]["PathFilter4"]["out"] )
__children["Scene"]["CowField"]["Transform"]["transform"]["translate"]["x"].setInput( __children["Scene"]["CowField"]["randomizeZ"]["outFloat"] )
__children["Scene"]["CowField"]["Transform"]["transform"]["translate"]["z"].setInput( __children["Scene"]["CowField"]["randomizeX"]["outFloat"] )
__children["Scene"]["CowField"]["Transform"]["transform"]["rotate"]["y"].setInput( __children["Scene"]["CowField"]["randomizeRotation"]["outFloat"] )
__children["Scene"]["CowField"]["Transform"]["__uiPosition"].setValue( imath.V2f( -15.7570734, -21.3598938 ) )
__children["Scene"]["CowField"]["PathFilter4"]["paths"].setValue( IECore.StringVectorData( [ '/cow/*' ] ) )
__children["Scene"]["CowField"]["PathFilter4"]["__uiPosition"].setValue( imath.V2f( -1.46225071, -16.8778172 ) )
__children["Scene"]["CowField"]["randomizeRotation"]["seedVariable"].setValue( 'scene:path' )
__children["Scene"]["CowField"]["randomizeRotation"]["floatRange"].setValue( imath.V2f( -180, 180 ) )
__children["Scene"]["CowField"]["randomizeRotation"]["__uiPosition"].setValue( imath.V2f( -27.4238281, -24.6581326 ) )
__children["Scene"]["CowField"]["randomizeZ"]["seed"].setValue( 7 )
__children["Scene"]["CowField"]["randomizeZ"]["seedVariable"].setValue( 'scene:path' )
__children["Scene"]["CowField"]["randomizeZ"]["floatRange"].setInput( __children["Scene"]["CowField"]["Expression"]["__out"]["p0"] )
__children["Scene"]["CowField"]["randomizeZ"]["__uiPosition"].setValue( imath.V2f( -27.3572159, -21.1468506 ) )
__children["Scene"]["CowField"]["randomizeX"]["seed"].setValue( 11 )
__children["Scene"]["CowField"]["randomizeX"]["seedVariable"].setValue( 'scene:path' )
__children["Scene"]["CowField"]["randomizeX"]["floatRange"].setValue( imath.V2f( -20, 20 ) )
__children["Scene"]["CowField"]["randomizeX"]["__uiPosition"].setValue( imath.V2f( -27.4259262, -17.144928 ) )
__children["Scene"]["CowField"]["Backdrop3"]["title"].setValue( 'Randomise' )
__children["Scene"]["CowField"]["Backdrop3"]["description"].setValue( 'We use right-click > Randomise to vary the rotation and position of each cow.' )
__children["Scene"]["CowField"]["Backdrop3"]["__uiBound"].setValue( imath.Box2f( imath.V2f( -8.5, -15.0433674 ), imath.V2f( 35.7571335, 10.5407867 ) ) )
__children["Scene"]["CowField"]["Backdrop3"]["__uiPosition"].setValue( imath.V2f( -25.3480759, -13.0320148 ) )
__children["Scene"]["CowField"]["Expression"]["__in"]["p0"].setInput( __children["Scene"]["CowField"]["randomizeX"]["floatRange"] )
__children["Scene"]["CowField"]["Expression"]["__uiPosition"].setValue( imath.V2f( -30.3148041, -19.0660019 ) )
__children["Scene"]["CowField"]["BoxOut"]["in"].setInput( __children["Scene"]["CowField"]["Transform"]["out"] )
Gaffer.Metadata.registerValue( __children["Scene"]["CowField"]["BoxOut"]["__out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["Scene"]["CowField"]["BoxOut"]["__out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["Scene"]["CowField"]["BoxOut"]["__out"], 'description', 'The output scene.' )
__children["Scene"]["CowField"]["BoxOut"]["__uiPosition"].setValue( imath.V2f( -15.7570734, -33.9992256 ) )
__children["Scene"]["CowField"]["out"].setInput( __children["Scene"]["CowField"]["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["Scene"]["CowField"]["out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["Scene"]["CowField"]["out"], 'description', 'The output scene.' )
Gaffer.Metadata.registerValue( __children["Scene"]["CowField"]["out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["Scene"]["CowField"]["out"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["Scene"]["CowField"]["out"], 'layout:index', 0 )
__children["Scene"]["BoxOut"]["in"].setInput( __children["Scene"]["Group"]["out"] )
Gaffer.Metadata.registerValue( __children["Scene"]["BoxOut"]["__out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["Scene"]["BoxOut"]["__out"], 'labelPlugValueWidget:renameable', True )
Gaffer.Metadata.registerValue( __children["Scene"]["BoxOut"]["__out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["Scene"]["BoxOut"]["__out"], 'description', 'The processed output scene.' )
__children["Scene"]["BoxOut"]["__uiPosition"].setValue( imath.V2f( -49.5511169, 44.7148132 ) )
__children["Scene"]["__uiPosition"].setValue( imath.V2f( -49.5518265, 56.3805771 ) )
__children["Backdrop10"]["title"].setValue( '' )
__children["Backdrop10"]["__uiBound"].setValue( imath.Box2f( imath.V2f( 0, 0 ), imath.V2f( 97, 25 ) ) )
__children["Backdrop10"]["__uiPosition"].setValue( imath.V2f( -122.75, 61.5 ) )
__children["Goal"]["title"].setValue( 'Example: Per-location Shader Variation (Arnold)' )
__children["Goal"]["scale"].setValue( 1.5 )
__children["Goal"]["description"].setValue( 'In this graph, we show how to use the CustomAttributes node to create per-location shading variation in the Arnold renderer.' )
__children["Goal"]["__uiBound"].setValue( imath.Box2f( imath.V2f( 0, 0 ), imath.V2f( 70, 25 ) ) )
__children["Goal"]["__uiPosition"].setValue( imath.V2f( -110, 61.5 ) )
__children["PathFilter5"]["paths"].setValue( IECore.StringVectorData( [ '...' ] ) )
__children["PathFilter5"]["__uiPosition"].setValue( imath.V2f( -26.5978985, -10.8906269 ) )
__children["Backdrop4"]["title"].setValue( 'Per-location color variation' )
__children["Backdrop4"]["description"].setValue( "Per-object variation can be achieved by using the CustomAttributes node to randomize a color based on each object's location, and then reading that resulting color value into a shader at render time.\n\nFirst, we add a custom `user:colorVariation` Color3f attribute to the CustomAtributes node. We then drive that attribute with a Random node (right-click the plug, then select Randomise... from the context menu).\n\nThis creates a new attribute (which you can verify in the Scene Inspector), but with a single color shared across all locations. In order to make it vary, we need to tell the node to change its value based on the object's location (also known as path).\n\nTo do this, we make use of the Random node's Context Entry plug. This tells the node to generate a new random value whenever some part of the Context changes. If you're not familiar with the concept of Contexts in Gaffer, in a nutshell they contain information about which location and frame a node is currently computing.\n\nHere, we set the Context Entry plug to `scene:path`, which tells the node to generate a new random color for each location in the scene. Since each cow in the scene has a different location (or path), each should thus have a unique color.\n\nYou can verify this in the Scene Inspector (by default in the tab next to the Node Editor). If you select a cow in the Viewer or Hierarchy View, and then expand the Attributes section in the Scene Inspector, you should see its `user:colorVariation` attribute. Each cow you select should have a different value for that attribute." )
__children["Backdrop4"]["__uiBound"].setValue( imath.Box2f( imath.V2f( -10, -37.5400391 ), imath.V2f( 48.2769547, 9.48580933 ) ) )
__children["Backdrop4"]["__uiPosition"].setValue( imath.V2f( -112.693184, 37.8769875 ) )
Gaffer.Metadata.registerValue( __children["Backdrop5"], 'nodeGadget:color', imath.Color3f( 0.300000012, 0.5, 0.460500002 ) )
__children["Backdrop5"]["title"].setValue( 'Tip: Previewing the color variation' )
__children["Backdrop5"]["description"].setValue( 'Select the AttributeVisualiser node to see the per-location values directly in the Viewer!' )
__children["Backdrop5"]["__uiBound"].setValue( imath.Box2f( imath.V2f( 0, 0 ), imath.V2f( 40, 15 ) ) )
__children["Backdrop5"]["__uiPosition"].setValue( imath.V2f( -19.5, -22.2000008 ) )
__children["Noise"]["parameters"]["scale"].setValue( 0.5 )
__children["Noise"]["parameters"]["t"].setValue( 1.0 )
__children["Noise"]["__uiPosition"].setValue( imath.V2f( -114.675827, -39.9399033 ) )
__children["MixColor"]["parameters"]["a"].setInput( __children["UserDataRgb"]["out"] )
__children["MixColor"]["parameters"]["b"].setValue( imath.Color3f( 0.819999993, 0.819999993, 0.819999993 ) )
__children["MixColor"]["parameters"]["m"].setInput( __children["RemapFloat"]["out"]["out"] )
__children["MixColor"]["__uiPosition"].setValue( imath.V2f( -83.8771439, -38.4639282 ) )
Gaffer.Metadata.registerValue( __children["Backdrop6"], 'nodeGadget:color', imath.Color3f( 0.347949386, 0.438627928, 0.5 ) )
__children["Backdrop6"]["title"].setValue( 'Note: Randomizing Color3f plugs' )
__children["Backdrop6"]["description"].setValue( "When randomizing Color3f plugs, make sure to right-click the color preview to the right of the channel fields to target the whole plug. If you right-click one of the channel fields, you'll only randomize that one channel." )
__children["Backdrop6"]["__uiBound"].setValue( imath.Box2f( imath.V2f( 0, 0 ), imath.V2f( 40, 20 ) ) )
__children["Backdrop6"]["__uiPosition"].setValue( imath.V2f( -25, 27.75 ) )
Gaffer.Metadata.registerValue( __children["Backdrop8"], 'nodeGadget:color', imath.Color3f( 0.347949386, 0.438627928, 0.5 ) )
__children["Backdrop8"]["title"].setValue( '' )
__children["Backdrop8"]["__uiBound"].setValue( imath.Box2f( imath.V2f( 0, 0 ), imath.V2f( 48, 20 ) ) )
__children["Backdrop8"]["__uiPosition"].setValue( imath.V2f( -25, 6 ) )
Gaffer.Metadata.registerValue( __children["Backdrop7"], 'nodeGadget:color', imath.Color3f( 0.347949386, 0.438627928, 0.5 ) )
__children["Backdrop7"]["title"].setValue( 'Note: Renderers and custom attributes' )
__children["Backdrop7"]["description"].setValue( 'When creating a custom shader attribute, make sure to give its name the "user:" prefix. Without this prefix, Gaffer will not deliver it to the renderer.' )
__children["Backdrop7"]["__uiBound"].setValue( imath.Box2f( imath.V2f( 0, 0 ), imath.V2f( 40, 20 ) ) )
__children["Backdrop7"]["__uiPosition"].setValue( imath.V2f( -21, 6 ) )
__children["RemapFloat"]["parameters"]["in"].setInput( __children["Noise"]["out"]["n"] )
__children["RemapFloat"]["parameters"]["minIn"].setValue( 0.49900001287460327 )
__children["RemapFloat"]["parameters"]["maxIn"].setValue( 0.5009999871253967 )
__children["RemapFloat"]["parameters"]["clampMin"].setValue( 1 )
__children["RemapFloat"]["parameters"]["clampMax"].setValue( 1 )
__children["RemapFloat"]["__uiPosition"].setValue( imath.V2f( -98.5845795, -42.3399048 ) )
__children["InteractiveRender"]["in"].setInput( __children["OtherShadersAndRenderOptions"]["out"] )
__children["InteractiveRender"]["renderer"].setValue( 'Arnold' )
__children["InteractiveRender"]["__uiPosition"].setValue( imath.V2f( -51.056736, -67.1949158 ) )
__children["Scene"]["CowField"]["Expression"]["__engine"].setValue( 'python' )
__children["Scene"]["CowField"]["Expression"]["__expression"].setValue( 'import imath\n\nparent["__out"]["p0"] = parent["__in"]["p0"]' )


del __children

