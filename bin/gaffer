#! /bin/bash
##########################################################################
#
#  Copyright (c) 2011-2012, John Haddon. All rights reserved.
#  Copyright (c) 2011-2012, Image Engine Design Inc. All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are
#  met:
#
#      * Redistributions of source code must retain the above
#        copyright notice, this list of conditions and the following
#        disclaimer.
#
#      * Redistributions in binary form must reproduce the above
#        copyright notice, this list of conditions and the following
#        disclaimer in the documentation and/or other materials provided with
#        the distribution.
#
#      * Neither the name of John Haddon nor the names of
#        any other contributors to this software may be used to endorse or
#        promote products derived from this software without specific prior
#        written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
#  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
#  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
#  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
#  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
#  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
##########################################################################

# Wrapper script for gaffer. This ensures that relevant environment
# variables are set appropriately and then runs gaffer.py in the
# correct python interpreter.
##########################################################################

set -e

# Remove -psn_0 argument that the OS X launcher adds on annoyingly.
##########################################################################

if [[ $1 == -psn_0_* ]] ; then
	shift
fi

# Work around OCIO bug that causes parsing to fail for certain locales.
# See https://github.com/imageworks/OpenColorIO/issues/297
##########################################################################

export LC_NUMERIC=C

# Find where this script is located, resolving any symlinks that were used
# to invoke it. Set GAFFER_ROOT based on the script location.
##########################################################################

pushd . &> /dev/null

# resolve symlinks
thisScript=$0
while [[ -L $thisScript ]]
do
	cd "`dirname "$thisScript"`"
	thisScript=`basename "$thisScript"`
	thisScript=`readlink "$thisScript"`
done

# find the bin directory we're in
cd "`dirname "$thisScript"`"
binDir=`pwd -P`
export GAFFER_ROOT="`dirname "$binDir"`"

popd &> /dev/null

# Make sure resource paths are set appropriately
##########################################################################

# Prepend a directory to a path if it is not
# already there.
#
# $1 is the value to include in the path
# $2 is the name of the path to edit
#
# e.g. prependToPath "$HOME/bin" PATH
function prependToPath {

	if [[ ":${!2}:" != *":$1:"* ]] ; then

		if [[ ${!2} ]] ; then
			eval "export $2=\"$1:${!2}\""
		else
			eval "export $2=\"$1\""
		fi

	fi

}

function appendToPath {

	if [[ ":${!2}:" != *":$1:"* ]] ; then

		if [[ ${!2} ]] ; then
			eval "export $2=\"${!2}:$1\""
		else
			eval "export $2=\"$1\""
		fi

	fi

}

prependToPath "$GAFFER_ROOT/glsl" IECOREGL_SHADER_PATHS
prependToPath "$GAFFER_ROOT/glsl" IECOREGL_SHADER_INCLUDE_PATHS

prependToPath "$GAFFER_ROOT/fonts" IECORE_FONT_PATHS
prependToPath "$HOME/gaffer/ops:$GAFFER_ROOT/ops" IECORE_OP_PATHS

prependToPath "$HOME/gaffer/opPresets:$GAFFER_ROOT/opPresets" IECORE_OP_PRESET_PATHS
prependToPath "$HOME/gaffer/procedurals:$GAFFER_ROOT/procedurals" IECORE_PROCEDURAL_PATHS
prependToPath "$HOME/gaffer/proceduralPresets:$GAFFER_ROOT/proceduralPresets" IECORE_PROCEDURAL_PRESET_PATHS

if [[ -z $CORTEX_POINTDISTRIBUTION_TILESET ]] ; then
	export CORTEX_POINTDISTRIBUTION_TILESET="$GAFFER_ROOT/resources/cortex/tileset_2048.dat"
fi

prependToPath "$HOME/gaffer/apps:$GAFFER_ROOT/apps" GAFFER_APP_PATHS

prependToPath "$HOME/gaffer/startup" GAFFER_STARTUP_PATHS
appendToPath "$GAFFER_ROOT/startup" GAFFER_STARTUP_PATHS

prependToPath "$HOME/gaffer/startup" CORTEX_STARTUP_PATHS
appendToPath "$GAFFER_ROOT/startup" CORTEX_STARTUP_PATHS

prependToPath "$GAFFER_ROOT/graphics" GAFFERUI_IMAGE_PATHS

if [[ -e $GAFFER_ROOT/bin/oslc ]] ; then
	export OSLHOME=$GAFFER_ROOT
fi

## \todo: should we rename this to "osl" to match our "glsl" folder?
prependToPath "$HOME/gaffer/shaders:$GAFFER_ROOT/shaders" OSL_SHADER_PATHS

if [[ -z $GAFFEROSL_CODE_DIRECTORY ]] ; then
	export GAFFEROSL_CODE_DIRECTORY="$HOME/gaffer/oslCode"
	appendToPath "$GAFFEROSL_CODE_DIRECTORY" OSL_SHADER_PATHS
fi

# Get python set up properly
##########################################################################

# Make sure PYTHONHOME is pointing to our internal python build.
# We only do this if Gaffer has been built with an internal version
# of python - otherwise we assume the existing environment is providing
# the right value.

if [[ -e $GAFFER_ROOT/bin/python ]] ; then

	if [[ `uname` = "Linux" ]] ; then
		export PYTHONHOME="$GAFFER_ROOT"
	else
		export PYTHONHOME="$GAFFER_ROOT/lib/Python.framework/Versions/Current"
	fi

fi

# Get python module path set up

prependToPath "$GAFFER_ROOT/python" PYTHONPATH

# Get library paths set up
##########################################################################

if [[ `uname` = "Linux" ]] ; then
	prependToPath "$GAFFER_ROOT/lib" LD_LIBRARY_PATH
else
	prependToPath "$GAFFER_ROOT/lib" DYLD_FRAMEWORK_PATH
	prependToPath "$GAFFER_ROOT/lib" DYLD_LIBRARY_PATH
	# PySide2 installs its libraries next to its python modules,
	# and messes up the rpaths such that they can't be relocated.
	# Work around this by putting them on the DYLD_LIBRARY_PATH.
	prependToPath "$PYTHONHOME/lib/python2.7/site-packages/PySide2" DYLD_LIBRARY_PATH
	prependToPath /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Resources/ DYLD_LIBRARY_PATH
fi

if [[ -e $GAFFER_ROOT/qt/plugins ]] ; then
	export QT_QPA_PLATFORM_PLUGIN_PATH="$GAFFER_ROOT/qt/plugins"
fi

# Get the executable path set up, for running child processes from Gaffer
##########################################################################

prependToPath "$GAFFER_ROOT/bin" PATH

# Set up Appleseed
##########################################################################

if [[ -z $APPLESEED && -d $GAFFER_ROOT/appleseed ]] ; then

	export APPLESEED="$GAFFER_ROOT/appleseed"

fi

if [[ $APPLESEED ]] ; then

	if [[ `uname` = "Linux" ]] ; then
		prependToPath "$APPLESEED/lib" LD_LIBRARY_PATH
	else
		prependToPath "$APPLESEED/lib" DYLD_LIBRARY_PATH
	fi

	# Using a glob to keep the wrapper agnostic of python version.
	for appleseedPython in "$APPLESEED"/lib/python* ; do
		prependToPath "$appleseedPython" PYTHONPATH
	done

	prependToPath "$APPLESEED/shaders/appleseed" OSL_SHADER_PATHS
	prependToPath "$GAFFER_ROOT/appleseedDisplays" APPLESEED_SEARCHPATH
	prependToPath "$OSL_SHADER_PATHS" APPLESEED_SEARCHPATH

	prependToPath "$APPLESEED/bin" PATH

fi

# Set up Arnold
##########################################################################

prependToPath "$GAFFER_ROOT/arnold/plugins" ARNOLD_PLUGIN_PATH

if [[ $ARNOLD_ROOT ]] ; then

	if [[ `uname` = "Linux" ]] ; then
		appendToPath "$ARNOLD_ROOT/bin" LD_LIBRARY_PATH
	else
		appendToPath "$ARNOLD_ROOT/bin" DYLD_LIBRARY_PATH
	fi

	appendToPath "$ARNOLD_ROOT/bin" PATH
	appendToPath "$ARNOLD_ROOT/python" PYTHONPATH

fi

# Set up 3Delight
##########################################################################

if [[ -n $DELIGHT ]] ; then

	if [[ `uname` = "Linux" ]] ; then
		appendToPath "$DELIGHT/lib" LD_LIBRARY_PATH
	else
		appendToPath "$DELIGHT/lib" DYLD_LIBRARY_PATH
	fi

	appendToPath "$DELIGHT/bin" PATH
	appendToPath "$DELIGHT/python" PYTHONPATH
	appendToPath "$DELIGHT/shaders" DL_SHADERS_PATH
	appendToPath "$DELIGHT/displays" DL_DISPLAYS_PATH

	appendToPath "$DELIGHT" OSL_SHADER_PATHS

	appendToPath "$GAFFER_ROOT/renderMan/displayDrivers" DL_RESOURCES_PATH

fi

# Set up 3rd Party extensions
##########################################################################

IFS=:
for extension in $GAFFER_EXTENSION_PATHS; do

	if [[ `uname` = "Linux" ]] ; then
		appendToPath "$extension/lib" LD_LIBRARY_PATH
	else
		appendToPath "$extension/lib" DYLD_LIBRARY_PATH
	fi

	appendToPath "$extension/bin" PATH
	appendToPath "$extension/python" PYTHONPATH
	appendToPath "$extension/apps" GAFFER_APP_PATHS
	appendToPath "$extension/graphics" GAFFERUI_IMAGE_PATHS
	appendToPath "$extension/glsl" IECOREGL_SHADER_PATHS
	appendToPath "$extension/glsl" IECOREGL_SHADER_INCLUDE_PATHS
	appendToPath "$extension/shaders" OSL_SHADER_PATHS
	prependToPath "$extension/startup" GAFFER_STARTUP_PATHS

done
unset IFS

# Run gaffer itself
##########################################################################

if [[ -n $GAFFER_DEBUG ]] ; then
	if [[ -z $GAFFER_DEBUGGER ]] ; then
		if [[ `uname` = "Linux" ]] ; then
			export GAFFER_DEBUGGER="gdb --args"
		else
			export GAFFER_DEBUGGER="lldb -- "
		fi
	fi
	# Using `which` because lldb doesn't seem to respect $PATH
	exec $GAFFER_DEBUGGER `which python` "$GAFFER_ROOT/bin/gaffer.py" "$@"
else
	exec python "$GAFFER_ROOT/bin/gaffer.py" "$@"
fi
