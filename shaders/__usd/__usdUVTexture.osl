//////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2024, Cinesite VFX Ltd. All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
//
//      * Redistributions of source code must retain the above
//        copyright notice, this list of conditions and the following
//        disclaimer.
//
//      * Redistributions in binary form must reproduce the above
//        copyright notice, this list of conditions and the following
//        disclaimer in the documentation and/or other materials provided with
//        the distribution.
//
//      * Neither the name of John Haddon nor the names of
//        any other contributors to this software may be used to endorse or
//        promote products derived from this software without specific prior
//        written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
//  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
//  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
//  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
//  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
//  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
//  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////

string convertWrap( string wrap )
{
	if( wrap == "useMetadata" )
	{
		return "default";
	}
	if( wrap == "repeat" )
	{
		return "periodic";
	}

	return wrap;
}

shader __usdUVTexture
(
	string file = "",
	string file_meta_colorspace = "",
	float uvCoord[2] = {0, 0},
	string wrapS = "default",
	string wrapT = "default",
	float fallback[4] = {0, 0, 0, 1},
	float scale[4] = {1, 1, 1, 1},
	float bias[4] = {0, 0, 0, 0},

	output color rgb = color(0),
	output float r = 0,
	output float g = 0,
	output float b = 0,
	output float a = 0,
)
{
	rgb = texture(
		file, uvCoord[0], uvCoord[1],
		"missingcolor", color( fallback[0], fallback[1], fallback[2] ), "missingalpha", fallback[3],
		"swrap", convertWrap( wrapS ), "twrap", convertWrap( wrapT ), "alpha", a
	);

	rgb = rgb * color( scale[0], scale[1], scale[2] ) + color( bias[0], bias[1], bias[2] );
	r = rgb[0];
	g = rgb[1];
	b = rgb[2];
	a = a * scale[3] + bias[3];
}
