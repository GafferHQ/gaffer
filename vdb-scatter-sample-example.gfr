import Gaffer
import GafferImage
import GafferOSL
import GafferScene
import GafferVDB
import IECore
import imath

Gaffer.Metadata.registerValue( parent, "serialiser:milestoneVersion", 0, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:majorVersion", 56, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:minorVersion", 0, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:patchVersion", 0, persistent=False )

__children = {}

parent["variables"].addChild( Gaffer.NameValuePlug( "image:catalogue:port", Gaffer.IntPlug( "value", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "imageCataloguePort", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
parent["variables"].addChild( Gaffer.NameValuePlug( "project:name", Gaffer.StringPlug( "value", defaultValue = 'default', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "projectName", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
parent["variables"].addChild( Gaffer.NameValuePlug( "project:rootDirectory", Gaffer.StringPlug( "value", defaultValue = '$HOME/gaffer/projects/${project:name}', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "projectRootDirectory", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["defaultFormat"] = GafferImage.FormatPlug( "defaultFormat", defaultValue = GafferImage.Format( 1920, 1080, 1.000 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["defaultFormat"] )
__children["ScatterPoints"] = GafferVDB.ScatterPoints( "ScatterPoints" )
parent.addChild( __children["ScatterPoints"] )
__children["ScatterPoints"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["SampleGrids"] = GafferVDB.SampleGrids( "SampleGrids" )
parent.addChild( __children["SampleGrids"] )
__children["SampleGrids"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["SceneReader"] = GafferScene.SceneReader( "SceneReader" )
parent.addChild( __children["SceneReader"] )
__children["SceneReader"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PathFilter"] = GafferScene.PathFilter( "PathFilter" )
parent.addChild( __children["PathFilter"] )
__children["PathFilter"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLObject"] = GafferOSL.OSLObject( "OSLObject" )
parent.addChild( __children["OSLObject"] )
__children["OSLObject"]["primitiveVariables"].addChild( Gaffer.NameValuePlug( "Cs", Gaffer.Color3fPlug( "value", defaultValue = imath.Color3f( 0, 0, 0 ), ), True, "primitiveVariable", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["OSLObject"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLCode"] = GafferOSL.OSLCode( "OSLCode" )
parent.addChild( __children["OSLCode"] )
__children["OSLCode"]["parameters"].addChild( Gaffer.FloatPlug( "test", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLCode"]["parameters"].addChild( Gaffer.SplinefColor3fPlug( "input1", defaultValue = Gaffer.SplineDefinitionfColor3f( ( ( 0, imath.Color3f( 0, 0, 0 ) ), ( 1, imath.Color3f( 1, 1, 1 ) )), Gaffer.SplineDefinitionInterpolation( 1 )), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLCode"]["parameters"]["input1"].clearPoints()
__children["OSLCode"]["parameters"]["input1"].addChild( Gaffer.ValuePlug( "p0", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLCode"]["parameters"]["input1"]["p0"].addChild( Gaffer.FloatPlug( "x", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLCode"]["parameters"]["input1"]["p0"].addChild( Gaffer.Color3fPlug( "y", defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLCode"]["parameters"]["input1"].addChild( Gaffer.ValuePlug( "p1", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLCode"]["parameters"]["input1"]["p1"].addChild( Gaffer.FloatPlug( "x", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLCode"]["parameters"]["input1"]["p1"].addChild( Gaffer.Color3fPlug( "y", defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLCode"]["parameters"]["input1"].addChild( Gaffer.ValuePlug( "p2", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLCode"]["parameters"]["input1"]["p2"].addChild( Gaffer.FloatPlug( "x", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLCode"]["parameters"]["input1"]["p2"].addChild( Gaffer.Color3fPlug( "y", defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLCode"]["out"].addChild( Gaffer.Color3fPlug( "outColor", direction = Gaffer.Plug.Direction.Out, defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLCode"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["InFloat"] = GafferOSL.OSLShader( "InFloat" )
parent.addChild( __children["InFloat"] )
__children["InFloat"].loadShader( "ObjectProcessing/InFloat" )
__children["InFloat"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
parent["variables"]["imageCataloguePort"]["value"].setValue( 37875 )
Gaffer.Metadata.registerValue( parent["variables"]["imageCataloguePort"], 'readOnly', True )
Gaffer.Metadata.registerValue( parent["variables"]["projectName"]["name"], 'readOnly', True )
Gaffer.Metadata.registerValue( parent["variables"]["projectRootDirectory"]["name"], 'readOnly', True )
__children["ScatterPoints"]["in"].setInput( __children["SceneReader"]["out"] )
__children["ScatterPoints"]["filter"].setInput( __children["PathFilter"]["out"] )
__children["ScatterPoints"]["nonuniform"].setValue( True )
__children["ScatterPoints"]["pointCount"].setValue( 1000000 )
__children["ScatterPoints"]["probability"].setValue( 5.0 )
__children["ScatterPoints"]["__uiPosition"].setValue( imath.V2f( -2.01489544, -3.65246964 ) )
__children["SampleGrids"]["in"].setInput( __children["ScatterPoints"]["out"] )
__children["SampleGrids"]["filter"].setInput( __children["PathFilter"]["out"] )
__children["SampleGrids"]["in1"].setInput( __children["SceneReader"]["out"] )
__children["SampleGrids"]["grids"].setValue( 'temperature' )
__children["SampleGrids"]["__uiPosition"].setValue( imath.V2f( 4.78510523, -11.8165321 ) )
__children["SceneReader"]["fileName"].setValue( '/home/don/Development/data/explosion.vdb' )
__children["SceneReader"]["__uiPosition"].setValue( imath.V2f( 6.28510523, 4.73452711 ) )
__children["PathFilter"]["paths"].setValue( IECore.StringVectorData( [ '/vdb' ] ) )
__children["PathFilter"]["__uiPosition"].setValue( imath.V2f( 33.6338348, 0.529561162 ) )
__children["OSLObject"]["in"].setInput( __children["SampleGrids"]["out"] )
__children["OSLObject"]["filter"].setInput( __children["PathFilter"]["out"] )
__children["OSLObject"]["primitiveVariables"]["primitiveVariable"]["value"].setInput( __children["OSLCode"]["out"]["outColor"] )
__children["OSLObject"]["primitiveVariables"]["primitiveVariable"]["value"]["r"].setInput( __children["OSLCode"]["out"]["outColor"]["r"] )
__children["OSLObject"]["primitiveVariables"]["primitiveVariable"]["value"]["g"].setInput( __children["OSLCode"]["out"]["outColor"]["g"] )
__children["OSLObject"]["primitiveVariables"]["primitiveVariable"]["value"]["b"].setInput( __children["OSLCode"]["out"]["outColor"]["b"] )
__children["OSLObject"]["__uiPosition"].setValue( imath.V2f( 4.78510523, -17.4805946 ) )
__children["OSLCode"]["parameters"]["test"].setInput( __children["InFloat"]["out"]["value"] )
__children["OSLCode"]["parameters"]["input1"]["p1"]["x"].setValue( 0.9768574833869934 )
__children["OSLCode"]["parameters"]["input1"]["p1"]["y"].setValue( imath.Color3f( 1, 1, 0 ) )
__children["OSLCode"]["parameters"]["input1"]["p2"]["x"].setValue( 0.1485992670059204 )
__children["OSLCode"]["parameters"]["input1"]["p2"]["y"].setValue( imath.Color3f( 0.349999994, 0, 0 ) )
__children["OSLCode"]["code"].setValue( 'outColor = colorSpline( input1Positions, input1Values, input1Basis, test );\n' )
__children["OSLCode"]["__uiPosition"].setValue( imath.V2f( -6.17705345, -17.4805946 ) )
__children["InFloat"]["parameters"]["name"].setValue( 'temperature' )
__children["InFloat"]["__uiPosition"].setValue( imath.V2f( -15.0566921, -17.4805946 ) )


del __children

