##########################################################################
#
#  Copyright (c) 2012-2015, Image Engine Design Inc. All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are
#  met:
#
#      * Redistributions of source code must retain the above
#        copyright notice, this list of conditions and the following
#        disclaimer.
#
#      * Redistributions in binary form must reproduce the above
#        copyright notice, this list of conditions and the following
#        disclaimer in the documentation and/or other materials provided with
#        the distribution.
#
#      * Neither the name of John Haddon nor the names of
#        any other contributors to this software may be used to endorse or
#        promote products derived from this software without specific prior
#        written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
#  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
#  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
#  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
#  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
#  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
##########################################################################

import os
import sys

import IEEnv

##########################################################################
# get arguments and other stuff to help us configure things
##########################################################################

def getOption( name, default ) :

	import sys
	result = default
	for a in sys.argv:
		if a[:len(name)+1]==name+"=" :
			result = a[len(name)+1:]

	return result


##########################################################################
# parse SConstruct file for the gafferVersion
##########################################################################

def gafferRegistryVersion() :

	import re
	sconsFile = "SConstruct"
	versionVars = ["gafferMilestoneVersion", "gafferMajorVersion"]
	varsToFind = list(versionVars)

	varsFound = {}
	with open( sconsFile, "r" ) as f :
		for line in f :
			for varName in varsToFind :
				match = re.match( "^\s*%s\s*=\s*(?P<value>\d+).*$" % varName, line )
				if match :
					varsFound[varName] = match.groupdict()["value"]
					varsToFind.remove( varName )
					break
			if not varsToFind:
				break

	if varsToFind:
		raise Exception( "Could not find the gaffer version in the SConstruct file. Please review the parsing rules." )

	return varsFound["gafferMilestoneVersion"] + "." + varsFound["gafferMajorVersion"] + ".0.0"


cortexMajorVersion = getOption( "CORTEX_MAJOR_VERSION", os.environ["CORTEX_MAJOR_VERSION"] )
cortexVersion = getOption( "CORTEX_VERSION", os.environ["CORTEX_VERSION"] )
cortexMajorVersion = cortexVersion.split( "." )[0]
cortexReg = IEEnv.registry["libraries"]["cortex"][cortexMajorVersion].get( IEEnv.platform(), IEEnv.registry["libraries"]["cortex"][cortexMajorVersion] )
compiler = getOption( "COMPILER", None )
compilerVersion = getOption( "COMPILER_VERSION", None )
targetApp = getOption( "APP", None )
targetAppVersion = None

## \todo: 0.13.0.0 is the first version that we started tracking
## Gaffer dependency versions in IEEnv. Should we instead have a
## more central "libraries we care about" section in IEEnv?

gafferReg = IEEnv.registry["apps"]["gaffer"][gafferRegistryVersion()][IEEnv.platform()]
qtVersion = gafferReg["qtVersion"]
pysideVersion = gafferReg.get( "pysideVersion", "2.0.0" )
oiioVersion = gafferReg["OpenImageIO"]
ocioVersion = gafferReg["OpenColorIO"]
oslVersion = gafferReg["OpenShadingLanguage"]
vdbVersion = gafferReg.get( "OpenVDB", "4.0.2" )
qtPyVersion = gafferReg.get( "qtPyVersion", "1.0.0.b3" )

vTuneVersion = getOption( "VTUNE_VERSION", os.environ["VTUNE_VERSION"] )
VTUNE_ROOT = IEEnv.registry["apps"]["vtune"][vTuneVersion][IEEnv.platform()]["location"]

if targetApp :

	if targetApp not in ( "nuke", "maya", "houdini" ) :
		raise RuntimeError( "Check config logic applies to the new app and remove this exception." )

	if (compiler or compilerVersion) :
		raise RuntimeError( "Must specify only one of COMPILER or APP" )

	targetAppVersion = getOption( "APP_VERSION", os.environ.get( targetApp.upper() + "_VERSION" ) )

	targetAppReg = IEEnv.registry["apps"][targetApp][targetAppVersion][IEEnv.platform()]
	compiler = targetAppReg["compiler"]
	compilerVersion = targetAppReg["compilerVersion"]
	pythonVersion = targetAppReg["pythonVersion"]
	targetAppMajorVersion = targetAppReg.get( "majorVersion", targetAppVersion )

	if "compilerFlags" in targetAppReg :
		CXXFLAGS = CXXFLAGS + targetAppReg["compilerFlags"]

	if "linkerFlags" in targetAppReg :
		targetAppLinkFlags = " ".join( targetAppReg["linkerFlags"] )
		if LINKFLAGS :
			LINKFLAGS = LINKFLAGS + " " + targetAppLinkFlags
		else :
			LINKFLAGS = targetAppLinkFlags

	qtVersion = targetAppReg.get( "qtVersion", qtVersion )

else :

	targetApp = "gaffer"
	targetAppReg = cortexReg
	pythonVersion = targetAppReg["preferredPythonVersion"]
	platformReg = IEEnv.registry["platformDefaults"][IEEnv.platform()]
	if not compiler :
		compiler = platformReg.get( "toolsCompiler", platformReg["compiler"] )
	if not compilerVersion :
		compilerVersion = platformReg.get( "toolsCompilerVersion", platformReg["compilerVersion"] )

pythonReg = IEEnv.registry['apps']['python'][pythonVersion][IEEnv.platform()]

arnoldVersion = getOption( "ARNOLD_VERSION", os.environ.get( "ARNOLD_VERSION", "" ) )

try :
	arnoldReg = IEEnv.registry["apps"]["arnold"][arnoldVersion][IEEnv.platform()]
	ARNOLD_ROOT = arnoldReg["location"]
except :
	ARNOLD_ROOT = ""

dlVersion = getOption( "DL_VERSION", os.environ.get( "DL_VERSION", "" ) )

try :
	dlReg = IEEnv.registry["apps"]["3delight"][dlVersion][IEEnv.platform()]
	RMAN_ROOT = dlReg["location"]
except :
	RMAN_ROOT = ""

appleseedVersion = getOption( "APPLESEED_VERSION", os.environ.get( "APPLESEED_VERSION", "" ) )
try :
	appleseedReg = IEEnv.registry["apps"]["appleseed"][appleseedVersion][IEEnv.platform()]
	APPLESEED_ROOT = appleseedReg["location"] if compilerVersion != "4.1.2" else ""
	LOCATE_DEPENDENCY_APPLESEED_SEARCHPATH = os.path.join( IEEnv.Environment.rootPath(), "apps", "cortex", cortexVersion, IEEnv.platform(), "base", "appleseed", appleseedVersion, "plugins", compiler, compilerVersion )
except :
	APPLESEED_ROOT = ""

OSLHOME = os.path.join( IEEnv.Environment.rootPath(), "apps", "OpenShadingLanguage", oslVersion, IEEnv.platform(), compiler, compilerVersion )

sphinxRoot = os.path.join( IEEnv.Environment.rootPath(), "apps", "sphinx", "1.4.1" )

##########################################################################
# set where we'll put things
##########################################################################

versionString = "${GAFFER_MILESTONE_VERSION}.${GAFFER_MAJOR_VERSION}.${GAFFER_MINOR_VERSION}.${GAFFER_PATCH_VERSION}-shaderPreview"
if getOption( "RELEASE", "0" )=="1" :
	buildRoot = "/tmp/gafferBuilds"
	installRoot = "/software"
else :
	buildRoot = os.path.expanduser( "~" )
	installRoot = os.path.expanduser( "/tmp/gafferTestInstalls" )
	versionString += "dev"

baseBuildDir = os.path.join( buildRoot, "apps", "gaffer", versionString, IEEnv.platform(), "cortex", cortexMajorVersion )
baseInstallDir = os.path.join( installRoot, "apps", "gaffer", versionString, IEEnv.platform(), "cortex", cortexMajorVersion )

BUILD_DIR = os.path.join( baseBuildDir, targetApp )
INSTALL_DIR = os.path.join( baseInstallDir, targetApp )

if targetAppVersion :

	BUILD_DIR = os.path.join( BUILD_DIR, targetAppMajorVersion )
	INSTALL_DIR = os.path.join( INSTALL_DIR, targetAppMajorVersion )

##########################################################################
# get include locations right
##########################################################################

boostVersion = targetAppReg.get( "boostVersion", cortexReg["boostVersion"] )
tbbVersion = targetAppReg.get( "tbbVersion", cortexReg["tbbVersion"] ) 
exrVersion = targetAppReg.get( "OpenEXRVersion", cortexReg["OpenEXRVersion"] )
usdVersion = targetAppReg.get( "usdVersion", cortexReg["usdVersion"] )

LOCATE_DEPENDENCY_SYSTEMPATH = [

	os.path.join( IEEnv.Environment.rootPath(), "apps", "OpenVDB", vdbVersion, IEEnv.platform(), compiler, compilerVersion, "include" ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "OpenVDB", vdbVersion, IEEnv.platform(), compiler, compilerVersion, "python", "include", "python{0}".format( pythonVersion ) ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "OpenColorIO", ocioVersion, IEEnv.platform(), compiler, compilerVersion, "include" ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "OpenImageIO", oiioVersion, IEEnv.platform(), compiler, compilerVersion, "include" ),
	os.path.join( OSLHOME, "include" ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "qt", qtVersion, IEEnv.platform(), compiler, compilerVersion, "include" ),
	os.path.join( IEEnv.Environment.rootPath(), "tools", "include", IEEnv.platform(), "glew", targetAppReg.get( "glew", cortexReg["glewVersion"] ) ),
	os.path.join( IEEnv.Environment.rootPath(), "tools", "include", IEEnv.platform(), "OpenEXR", exrVersion ),
	os.path.join( IEEnv.Environment.rootPath(), "tools", "include", IEEnv.platform(), "OpenEXR", exrVersion, "OpenEXR" ),
	os.path.join( IEEnv.Environment.rootPath(), "tools", "include", IEEnv.platform(), "tbb", tbbVersion ),
	os.path.join( IEEnv.Environment.rootPath(), "tools", "include", IEEnv.platform(), "boost", boostVersion ),
	os.path.join( pythonReg["location"], compiler, compilerVersion, pythonReg["include"], "python" + pythonVersion ),
	"/usr/include/freetype2",
]

if targetAppVersion :
	## \todo: We should probably be doing this for all targetApps,
	# but we're limiting ourselves to the only known problem case
	# for now. Reconsider this decision when we have fewer active
	# app versions (and ideally more conforming to VFX Platform).
	if targetApp == "maya" and targetAppMajorVersion == "2016" :
		LOCATE_DEPENDENCY_SYSTEMPATH[:0] = [ os.path.join( targetAppReg['location'], x ) for x in targetAppReg.get( 'includes', [] ) ]
	else :
		LOCATE_DEPENDENCY_SYSTEMPATH += [ os.path.join( targetAppReg['location'], x ) for x in targetAppReg.get( 'includes', [] ) ]

LOCATE_DEPENDENCY_CPPPATH = [
	os.path.join( IEEnv.Environment.rootPath(), "apps", "cortex", cortexVersion, IEEnv.platform(), "base", "include" ),
]

if getOption( "RELEASE", "0" )=="0" :

	LOCATE_DEPENDENCY_CPPPATH.insert(
		0,
		os.path.join( os.path.expanduser( "~" ), "apps", "cortex", cortexVersion, IEEnv.platform(), "base", "include" )
	)

	if targetAppVersion :
		LOCATE_DEPENDENCY_CPPPATH.insert(
			0,
			os.path.join( os.path.expanduser( "~" ), "apps", "cortex", cortexVersion, IEEnv.platform(), targetApp, targetAppMajorVersion, "include" )
		)

##########################################################################
# get lib locations right
##########################################################################

LOCATE_DEPENDENCY_LIBPATH = [

	os.path.join( pythonReg["location"], compiler, compilerVersion, "lib" ),
	os.path.join( IEEnv.Environment.rootPath(), "tools", "lib", IEEnv.platform(), compiler, compilerVersion ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "cortex", cortexVersion, IEEnv.platform(), "base", "lib", compiler, compilerVersion ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "cortex", cortexVersion, IEEnv.platform(), "base", "arnold", arnoldVersion, "lib", compiler, compilerVersion ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "cortex", cortexVersion, IEEnv.platform(), "base", "appleseed", appleseedVersion, "lib", compiler, compilerVersion ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "qt", qtVersion, IEEnv.platform(), compiler, compilerVersion, "lib" ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "PySide", pysideVersion, "qt" + qtVersion, "python" + pythonVersion, IEEnv.platform(), compiler, compilerVersion, "lib" ),
	os.path.join( OSLHOME, "lib" ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "usd", usdVersion, IEEnv.platform(), "cortex", cortexMajorVersion, "lib" ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "OpenVDB", vdbVersion, IEEnv.platform(), compiler, compilerVersion, "lib" ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "OpenVDB", vdbVersion, IEEnv.platform(), compiler, compilerVersion, "python", "lib", "python{0}".format( pythonVersion ) ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "appleseed", appleseedVersion, IEEnv.platform(), "lib" ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "openexr", exrVersion, IEEnv.platform(), compiler, compilerVersion, "lib" ),

]

LOCATE_DEPENDENCY_PYTHONPATH = [

	os.path.join( IEEnv.Environment.rootPath(), "apps", "cortex", cortexVersion, IEEnv.platform(), "base", "python", pythonVersion, compiler, compilerVersion ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "cortex", cortexVersion, IEEnv.platform(), "base", "arnold", arnoldVersion, "python", pythonVersion, compiler, compilerVersion ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "cortex", cortexVersion, IEEnv.platform(), "base", "appleseed", appleseedVersion, "python", pythonVersion, compiler, compilerVersion ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "openexr", exrVersion, IEEnv.platform(), compiler, compilerVersion, "python", pythonVersion, "boost", boostVersion, "lib64", "python" + pythonVersion, "site-packages" ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "OpenColorIO", ocioVersion, IEEnv.platform(), compiler, compilerVersion, "lib", "python" + pythonVersion, "site-packages" ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "usd", usdVersion, IEEnv.platform(), "cortex", cortexMajorVersion, "lib", "python" ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "OpenVDB", vdbVersion, IEEnv.platform(), compiler, compilerVersion, "python", "lib", "python" + pythonVersion ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "PySide", pysideVersion, "qt" + qtVersion, "python" + pythonVersion, IEEnv.platform(), compiler, compilerVersion, "python" ),
	os.path.join( IEEnv.Environment.rootPath(), "tools", "python", pythonVersion, IEEnv.platform(), compiler, compilerVersion, "sip", "4" ),
	os.path.join( IEEnv.Environment.rootPath(), "tools", "python", pythonVersion, IEEnv.platform(), compiler, compilerVersion, "subprocess32", "3" ),
	os.path.join( IEEnv.Environment.rootPath(), "tools", "python", pythonVersion, IEEnv.platform(), compiler, compilerVersion, "PyOpenGL", "3" ),
	os.path.join( IEEnv.Environment.rootPath(), "tools", "python", pythonVersion, "noarch" ),
	os.path.join( sphinxRoot, "lib", "python" + pythonVersion, "site-packages" ),
	os.path.join( sphinxRoot, "lib64", "python" + pythonVersion, "site-packages" ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "Qt.py", qtPyVersion ),

]

LOCATE_DEPENDENCY_RESOURCESPATH = [

	os.path.join( IEEnv.Environment.rootPath(), "apps", "gafferResources", "0.28.0.0", "resources" ),

]

os.environ["IECOREGL_SHADER_INCLUDE_PATHS"] = os.path.join( IEEnv.Environment.rootPath(), "apps", "cortex", cortexVersion, IEEnv.platform(), "base", "glsl" )

if targetAppVersion :

	targetAppLocation = targetAppReg["location"]
	if targetApp != "nuke" :
		# Include any library locations from the target application. We have to skip
		# this for Nuke at present (9.0v6) because Nuke contains a libpython2.7.so from Python 2.7.3,
		# and this is incompatible with the Python 2.7.5 we install for Python 2.7. Better
		# solutions might be to register Nuke's Python version as "2.7.3" in IEEnv rather than
		# as "2.7", or to update our build system to always use the python that ships with the
		# target app.
		for directory in targetAppReg.get( "libPaths", [] ) :
			LOCATE_DEPENDENCY_LIBPATH.insert(
				0,
				os.path.join( IEEnv.Environment.rootPath(), targetAppLocation, directory ),
			)

	LOCATE_DEPENDENCY_LIBPATH.insert(
		0,
		os.path.join( IEEnv.Environment.rootPath(), "apps", "cortex", cortexVersion, IEEnv.platform(), targetApp, targetAppMajorVersion, "lib" ),
	)

	LOCATE_DEPENDENCY_LIBPATH.insert(
		0,
		os.path.join( IEEnv.Environment.rootPath(), "tools", targetApp, targetAppVersion, "lib", IEEnv.platform() ),
	)

if getOption( "RELEASE", "0" )=="0" :

	LOCATE_DEPENDENCY_LIBPATH[:0] = [
		os.path.join( os.path.expanduser( "~" ), "apps", "cortex", cortexVersion, IEEnv.platform(), "base", "lib", compiler, compilerVersion ),
		os.path.join( os.path.expanduser( "~" ), "apps", "cortex", cortexVersion, IEEnv.platform(), "base", "arnold", arnoldVersion, "lib", compiler, compilerVersion ),
		os.path.join( os.path.expanduser( "~" ), "apps", "cortex", cortexVersion, IEEnv.platform(), "base", "appleseed", appleseedVersion, "lib", compiler, compilerVersion ),
	]

	LOCATE_DEPENDENCY_PYTHONPATH[:0] = [
		os.path.join( os.path.expanduser( "~" ), "apps", "cortex", cortexVersion, IEEnv.platform(), "base", "python", pythonVersion, compiler, compilerVersion ),
		os.path.join( os.path.expanduser( "~" ), "apps", "cortex", cortexVersion, IEEnv.platform(), "base", "arnold", arnoldVersion, "python", pythonVersion, compiler, compilerVersion ),
		os.path.join( os.path.expanduser( "~" ), "apps", "cortex", cortexVersion, IEEnv.platform(), "base", "appleseed", appleseedVersion, "python", pythonVersion, compiler, compilerVersion ),
	]

	os.environ["IECOREGL_SHADER_INCLUDE_PATHS"] = os.path.join( os.path.expanduser( "~" ), "apps", "cortex", cortexVersion, IEEnv.platform(), "base", "glsl" ) + ":" + os.environ["IECOREGL_SHADER_INCLUDE_PATHS"]

	if targetAppVersion :
		LOCATE_DEPENDENCY_LIBPATH.insert(
			0,
			os.path.join( os.path.expanduser( "~" ), "apps", "cortex", cortexVersion, IEEnv.platform(), targetApp, targetAppMajorVersion, "lib" ),
		)

##########################################################################
# get compiler and other build tools set up
##########################################################################

compilerReg = IEEnv.registry["compilers"][compiler][compilerVersion][IEEnv.platform()]
CXX = os.path.join( compilerReg["location"], compilerReg["bin"] )

SPHINX = os.path.join( sphinxRoot, "bin", "sphinx-build" )

# for app installs we copy the docs and graphics from the standalone install
if targetAppVersion and "install" in sys.argv :
	SPHINX = "disableDocs"
	INKSCAPE = "disableGraphics"
	INSTALL_POST_COMMAND="scons -i -f config/ie/postInstall STANDALONE_INSTALL_DIR={baseInstallDir}/gaffer INSTALL_DIR=$INSTALL_DIR".format( baseInstallDir = baseInstallDir )

##########################################################################
# figure out the lib suffixes
##########################################################################

compilerVersionSplit = compilerVersion.split( "." )
# figure out the suffix for boost libraries
boostVersion = targetAppReg.get( "boostVersion", cortexReg["boostVersion"] )
boostVersionSuffix = "-mt-" + boostVersion.replace( ".", "_" )
while boostVersionSuffix.endswith( "_0" ) :
	boostVersionSuffix = boostVersionSuffix[:-2]

OIIO_LIB_SUFFIX = "-%s" % oiioVersion
OCIO_LIB_SUFFIX = "-%s" % ocioVersion
OSL_LIB_SUFFIX = "-%s" % oslVersion

BOOST_LIB_SUFFIX = "-" + compiler + compilerVersionSplit[0] + compilerVersionSplit[1] + boostVersionSuffix

OPENEXR_LIB_SUFFIX = "-" + exrVersion

CORTEX_LIB_SUFFIX = "-" + cortexMajorVersion
CORTEX_PYTHON_LIB_SUFFIX = "-" + cortexMajorVersion + "-python" + pythonVersion

os.environ["PATH"] = os.path.join( pythonReg["location"], compiler, compilerVersion, "bin" ) + ":" + os.environ["PATH"]
os.environ["PYTHONHOME"] = os.path.join( pythonReg["location"], compiler, compilerVersion )

os.environ["OCIO"] = os.path.join( IEEnv.Environment.rootPath(), "config", "openColorIO", "nuke-default", "config.ocio" )

# we need these imported so we can run the commands to generate the documentation
ENV_VARS_TO_IMPORT="PATH PYTHONPATH PYTHONHOME IEENV_ROOT IEENV_DISABLE_WRAPPER_ENV_CHECK IECORE_FONT_PATHS IECOREGL_SHADER_INCLUDE_PATHS OCIO IEENV_WORKING_PATH DOXYGEN_VERSION OSL_VERSION SCONS_VERSION"
# the output is pretty tedious without this disabled
os.environ["IEENV_DISABLE_WRAPPER_ENV_CHECK"] = "1"

# speed up the build a bit hopefully.
BUILD_CACHEDIR = os.environ["IEBUILD_CACHEDIR"]
