import Gaffer
import GafferImage
import GafferScene
import GafferSceneTest
import IECore
import imath

Gaffer.Metadata.registerNodeValue( parent, "serialiser:milestoneVersion", 0, persistent=False )
Gaffer.Metadata.registerNodeValue( parent, "serialiser:majorVersion", 52, persistent=False )
Gaffer.Metadata.registerNodeValue( parent, "serialiser:minorVersion", 3, persistent=False )
Gaffer.Metadata.registerNodeValue( parent, "serialiser:patchVersion", 1, persistent=False )

__children = {}

parent["variables"].addChild( Gaffer.CompoundDataPlug.MemberPlug( "imageCataloguePort", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
parent["variables"]["imageCataloguePort"].addChild( Gaffer.StringPlug( "name", defaultValue = 'image:catalogue:port', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
parent["variables"]["imageCataloguePort"].addChild( Gaffer.IntPlug( "value", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
parent["variables"].addChild( Gaffer.CompoundDataPlug.MemberPlug( "projectName", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
parent["variables"]["projectName"].addChild( Gaffer.StringPlug( "name", defaultValue = 'project:name', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
parent["variables"]["projectName"].addChild( Gaffer.StringPlug( "value", defaultValue = 'default', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
parent["variables"].addChild( Gaffer.CompoundDataPlug.MemberPlug( "projectRootDirectory", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
parent["variables"]["projectRootDirectory"].addChild( Gaffer.StringPlug( "name", defaultValue = 'project:rootDirectory', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
parent["variables"]["projectRootDirectory"].addChild( Gaffer.StringPlug( "value", defaultValue = '$HOME/gaffer/projects/${project:name}', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["defaultFormat"] = GafferImage.FormatPlug( "defaultFormat", defaultValue = GafferImage.Format( 1920, 1080, 1.000 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["defaultFormat"] )
__children["TestLight"] = GafferSceneTest.TestLight( "TestLight" )
parent.addChild( __children["TestLight"] )
__children["TestLight"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["LightTweaks1"] = GafferScene.LightTweaks( "LightTweaks1" )
parent.addChild( __children["LightTweaks1"] )
__children["LightTweaks1"]["tweaks"].addChild( Gaffer.TweakPlug( "tweak_intensity", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["LightTweaks1"]["tweaks"]["tweak_intensity"].addChild( Gaffer.Color3fPlug( "value", defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["LightTweaks1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PathFilter"] = GafferScene.PathFilter( "PathFilter" )
parent.addChild( __children["PathFilter"] )
__children["PathFilter"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["LightTweaks2"] = GafferScene.LightTweaks( "LightTweaks2" )
parent.addChild( __children["LightTweaks2"] )
__children["LightTweaks2"]["tweaks"].addChild( Gaffer.TweakPlug( "tweak_intensity", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["LightTweaks2"]["tweaks"]["tweak_intensity"].addChild( Gaffer.Color3fPlug( "value", defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["LightTweaks2"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
parent["variables"]["imageCataloguePort"]["value"].setValue( 36378 )
Gaffer.Metadata.registerValue( parent["variables"]["imageCataloguePort"], 'readOnly', True )
Gaffer.Metadata.registerValue( parent["variables"]["projectName"]["name"], 'readOnly', True )
Gaffer.Metadata.registerValue( parent["variables"]["projectRootDirectory"]["name"], 'readOnly', True )
__children["TestLight"]["parameters"]["intensity"].setValue( imath.Color3f( 1, 1, 1 ) )
__children["TestLight"]["__uiPosition"].setValue( imath.V2f( -0.400000095, 12.9000006 ) )
__children["LightTweaks1"]["in"].setInput( __children["TestLight"]["out"] )
__children["LightTweaks1"]["filter"].setInput( __children["PathFilter"]["out"] )
__children["LightTweaks1"]["tweaks"]["tweak_intensity"]["name"].setValue( 'intensity' )
__children["LightTweaks1"]["tweaks"]["tweak_intensity"]["value"].setValue( imath.Color3f( 1, 0, 0 ) )
__children["LightTweaks1"]["__uiPosition"].setValue( imath.V2f( -0.399145961, 4.73593807 ) )
__children["PathFilter"]["paths"].setValue( IECore.StringVectorData( [ '/light' ] ) )
__children["PathFilter"]["__uiPosition"].setValue( imath.V2f( 12.6008539, 10.8179693 ) )
__children["LightTweaks2"]["in"].setInput( __children["LightTweaks1"]["out"] )
__children["LightTweaks2"]["filter"].setInput( __children["PathFilter"]["out"] )
__children["LightTweaks2"]["type"].setValue( 'light' )
__children["LightTweaks2"]["tweaks"]["tweak_intensity"]["name"].setValue( 'intensity' )
__children["LightTweaks2"]["tweaks"]["tweak_intensity"]["mode"].setValue( 3 )
__children["LightTweaks2"]["tweaks"]["tweak_intensity"]["value"].setValue( imath.Color3f( 0.5, 0.5, 0.5 ) )
__children["LightTweaks2"]["__uiPosition"].setValue( imath.V2f( -0.399145961, -3.42812443 ) )


del __children
