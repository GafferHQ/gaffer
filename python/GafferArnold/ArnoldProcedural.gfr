import Gaffer
import GafferImage
import GafferScene
import IECore
import imath

Gaffer.Metadata.registerValue( parent, "serialiser:milestoneVersion", 1, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:majorVersion", 5, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:minorVersion", 12, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:patchVersion", 0, persistent=False )

__children = {}

parent["variables"].addChild( Gaffer.NameValuePlug( "image:catalogue:port", Gaffer.IntPlug( "value", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "imageCataloguePort", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
parent["variables"].addChild( Gaffer.NameValuePlug( "project:name", Gaffer.StringPlug( "value", defaultValue = 'default', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "projectName", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
parent["variables"].addChild( Gaffer.NameValuePlug( "project:rootDirectory", Gaffer.StringPlug( "value", defaultValue = '$HOME/gaffer/projects/${project:name}', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "projectRootDirectory", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
parent["variables"].addChild( Gaffer.NameValuePlug( "renderPass", Gaffer.StringPlug( "value", defaultValue = '', ), "renderPass", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["openColorIO"] = GafferImage.OpenColorIOConfigPlug( "openColorIO", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["openColorIO"] )
__children["defaultFormat"] = GafferImage.FormatPlug( "defaultFormat", defaultValue = GafferImage.Format( 1920, 1080, 1.000 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["defaultFormat"] )
__children["ArnoldProcedural"] = Gaffer.Box( "ArnoldProcedural" )
parent.addChild( __children["ArnoldProcedural"] )
__children["ArnoldProcedural"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ArnoldProcedural"].addChild( Gaffer.V2fPlug( "__uiPosition1", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ArnoldProcedural"].addChild( GafferScene.ExternalProcedural( "ExternalProcedural" ) )
__children["ArnoldProcedural"]["ExternalProcedural"]["parameters"].addChild( Gaffer.NameValuePlug( "", Gaffer.StringPlug( "value", defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), True, "member1", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["ArnoldProcedural"]["ExternalProcedural"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ArnoldProcedural"].addChild( Gaffer.StringPlug( "fileName", defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ArnoldProcedural"].addChild( Gaffer.Box3fPlug( "bound", defaultValue = imath.Box3f( imath.V3f( -0.5, -0.5, -0.5 ), imath.V3f( 0.5, 0.5, 0.5 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ArnoldProcedural"].addChild( Gaffer.StringPlug( "name", defaultValue = 'procedural', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ArnoldProcedural"].addChild( Gaffer.StringPlug( "sets", defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ArnoldProcedural"].addChild( Gaffer.V2fPlug( "__uiPosition2", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ArnoldProcedural"].addChild( Gaffer.BoxOut( "BoxOut" ) )
__children["ArnoldProcedural"]["BoxOut"].setup( GafferScene.ScenePlug( "in", ) )
__children["ArnoldProcedural"]["BoxOut"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ArnoldProcedural"].addChild( GafferScene.ScenePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ArnoldProcedural"].addChild( Gaffer.TransformPlug( "transform", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ArnoldProcedural"].addChild( Gaffer.BoolPlug( "enabled", defaultValue = True, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
parent["frame"].setValue( 14.0 )
parent["variables"]["imageCataloguePort"]["value"].setValue( 33787 )
Gaffer.Metadata.registerValue( parent["variables"]["imageCataloguePort"], 'readOnly', True )
Gaffer.Metadata.registerValue( parent["variables"]["projectName"]["name"], 'readOnly', True )
Gaffer.Metadata.registerValue( parent["variables"]["projectRootDirectory"]["name"], 'readOnly', True )
Gaffer.Metadata.registerValue( parent["variables"]["renderPass"]["name"], 'readOnly', True )
Gaffer.Metadata.registerValue( parent["variables"]["renderPass"]["value"], 'plugValueWidget:type', 'GafferSceneUI.RenderPassEditor._RenderPassPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"], 'uiEditor:emptySections', IECore.StringVectorData( [  ] ) )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"], 'uiEditor:emptySectionIndices', IECore.IntVectorData( [  ] ) )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"], 'description', 'Creates Arnold procedurals, allowing `.ass` files to be embedded in the Gaffer scene for rendering.' )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"], 'noduleLayout:customGadget:addButtonTop:visible', False )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"], 'noduleLayout:customGadget:addButtonBottom:visible', False )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"], 'noduleLayout:customGadget:addButtonLeft:visible', False )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"], 'noduleLayout:customGadget:addButtonRight:visible', False )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"], 'layout:section:Transform:summary', '' )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"]["user"], 'layout:section', 'User' )
__children["ArnoldProcedural"]["__uiPosition"].setValue( imath.V2f( 10.9419022, 11.4641533 ) )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"]["__uiPosition"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"]["__uiPosition1"], 'layout:section', 'Settings' )
__children["ArnoldProcedural"]["ExternalProcedural"]["enabled"].setInput( __children["ArnoldProcedural"]["enabled"] )
__children["ArnoldProcedural"]["ExternalProcedural"]["name"].setInput( __children["ArnoldProcedural"]["name"] )
__children["ArnoldProcedural"]["ExternalProcedural"]["sets"].setInput( __children["ArnoldProcedural"]["sets"] )
__children["ArnoldProcedural"]["ExternalProcedural"]["transform"].setInput( __children["ArnoldProcedural"]["transform"] )
__children["ArnoldProcedural"]["ExternalProcedural"]["fileName"].setValue( 'procedural' )
__children["ArnoldProcedural"]["ExternalProcedural"]["bound"].setInput( __children["ArnoldProcedural"]["bound"] )
__children["ArnoldProcedural"]["ExternalProcedural"]["parameters"]["member1"]["name"].setValue( 'filename' )
__children["ArnoldProcedural"]["ExternalProcedural"]["parameters"]["member1"]["value"].setInput( __children["ArnoldProcedural"]["fileName"] )
__children["ArnoldProcedural"]["ExternalProcedural"]["__uiPosition"].setValue( imath.V2f( -3.10000014, 5 ) )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"]["fileName"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"]["fileName"], 'layout:index', 2 )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"]["fileName"], 'description', 'The path to the file to be loaded by the procedural. Typically this will be in the `.ass` file format.' )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"]["fileName"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"]["fileName"], 'plugValueWidget:type', 'GafferUI.FileSystemPathPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"]["fileName"], 'fileSystemPath:extensions', 'ass ass.gz' )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"]["fileName"], 'path:bookmarks', 'ass' )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"]["fileName"], 'path:leaf', True )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"]["bound"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"]["bound"], 'layout:index', 3 )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"]["bound"], 'description', 'The bounding box for the procedural. This will not affect rendering, but is used to draw a placeholder in the Viewer.' )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"]["bound"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"]["name"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"]["name"], 'layout:index', 0 )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"]["name"], 'description', 'The name of the procedural in the output scene.' )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"]["name"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"]["sets"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"]["sets"], 'layout:index', 1 )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"]["sets"], 'description', 'A list of sets to include the procedural in. The names should be separated by spaces.' )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"]["sets"], 'nodule:type', '' )
__children["ArnoldProcedural"]["__uiPosition2"].setValue( imath.V2f( 7.86275101, 11.4641552 ) )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"]["__uiPosition2"], 'layout:section', 'Settings' )
__children["ArnoldProcedural"]["BoxOut"]["in"].setInput( __children["ArnoldProcedural"]["ExternalProcedural"]["out"] )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"]["BoxOut"]["__out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"]["BoxOut"]["__out"], 'description', 'The output scene.' )
__children["ArnoldProcedural"]["BoxOut"]["__uiPosition"].setValue( imath.V2f( -1.60065842, -3.33203101 ) )
__children["ArnoldProcedural"]["out"].setInput( __children["ArnoldProcedural"]["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"]["out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"]["out"], 'description', 'The output scene.' )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"]["out"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"]["out"], 'layout:index', 4 )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"]["transform"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"]["transform"], 'description', 'The transform applied to the procedural\n.' )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"]["transform"], 'layout:section', 'Transform' )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"]["transform"], 'layout:index', 5 )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"]["enabled"], 'description', 'The on/off state of the node. When it is off, the node outputs\nan empty scene.' )
Gaffer.Metadata.registerValue( __children["ArnoldProcedural"]["enabled"], 'nodule:type', '' )


del __children
