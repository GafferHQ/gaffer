##########################################################################
#
#  Copyright (c) 2015, Image Engine Design Inc. All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are
#  met:
#
#      * Redistributions of source code must retain the above
#        copyright notice, this list of conditions and the following
#        disclaimer.
#
#      * Redistributions in binary form must reproduce the above
#        copyright notice, this list of conditions and the following
#        disclaimer in the documentation and/or other materials provided with
#        the distribution.
#
#      * Neither the name of John Haddon nor the names of
#        any other contributors to this software may be used to endorse or
#        promote products derived from this software without specific prior
#        written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
#  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
#  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
#  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
#  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
#  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
##########################################################################

import contextlib
import os
import shutil
import time
import subprocess
import unittest

import IECore
import Gaffer
import GafferTest

class ApplicationTest( GafferTest.TestCase ) :

	def testTaskSchedulerInitDoesntSuppressExceptions( self ) :

		def f() :

			with IECore.tbb_task_scheduler_init( IECore.tbb_task_scheduler_init.automatic ) :
				raise Exception( "Woops!")

		self.assertRaises( Exception, f )

	def testWrapperDoesntDuplicatePaths( self ) :

		for v in ["GAFFER_STARTUP_PATHS", "GAFFER_APP_PATHS"] :
			value = subprocess.check_output( [ str( Gaffer.executablePath() ), "env", "python", "-c", "import os; print(os.environ['{}'])".format( v ) ], universal_newlines = True )
			self.assertEqual( value.strip(), os.environ[v] )

	def testStartupDirectoryMigration( self ) :

		originalHome = os.environ["HOME"]
		self.addCleanup( os.environ.__setitem__, "HOME", originalHome )
		testHome = self.temporaryDirectory() / "home"
		os.environ["HOME"] = str( testHome )

		for previousVersions in [
			None,                            # Without even a `${HOME}/gaffer` directory
			[],                              # With `${HOME}/gaffer` but without any startup directories
			[ None ],                        # With only an unversioned startup directory
			[ None, "0.9", "1.0", "1.3" ],   # Mix of unversioned and versioned
			[ "1.3" ],                       # Versioned only
		] :
			with self.subTest( previousVersions = previousVersions ) :

				with contextlib.ExitStack() as exitStack :

					# Arrange to clean up after this subTest even if it fails.

					testHome.mkdir( parents = True )
					exitStack.callback( shutil.rmtree, testHome )

					# Build startup directories for previous versions.

					previousStartupDirs = []
					if previousVersions is not None :

						( testHome / "gaffer" ).mkdir()

						for version in previousVersions :
							if version is not None :
								startupDir = testHome / "gaffer" / f"startup-{version}"
							else :
								startupDir = testHome / "gaffer" / "startup"
							previousStartupDirs.append( startupDir )
							startupDir.mkdir( parents = True )
							( startupDir / "userGenerated1.py" ).touch()
							startupSubDir = startupDir / "subDir"
							startupSubDir.mkdir()
							( startupSubDir / "userGenerated2.py" ).touch()
							for name in [ "layouts.py", "bookmarks.py", "recentFiles.py" ] :
								with open( startupSubDir / name, "w" ) as testFile :
									testFile.write( "# This file was automatically generated by Gaffer.\n" )
									testFile.write( f"# {name} {version}" )

					# Launch multiple Gaffer processes that will compete to
					# make the startup directory for this version.

					processes = []
					for i in range( 0, 10 ) :
						processes.append(
							subprocess.Popen(
								[ str( Gaffer.executablePath() ), "license" ],
								stdout = subprocess.DEVNULL, stderr = subprocess.DEVNULL
							)
						)
					for process in processes :
						process.wait()
						self.assertEqual( process.returncode, 0 )

					# If there were no previous directories to migrate from, then we don't expect
					# migration to have occurred.

					expectedDir = testHome / "gaffer" / "startup-{}.{}".format( Gaffer.About.milestoneVersion(), Gaffer.About.majorVersion() )

					if not previousVersions :
						self.assertFalse( expectedDir.is_dir() )
						continue

					# Otherwise we do expect to find a migrated directory.

					self.assertTrue( expectedDir.is_dir() )

					# We always expect the auto-generated-by-gaffer files to have
					# been migrated.

					for name in [ "layouts.py", "bookmarks.py", "recentFiles.py" ] :
						with open( expectedDir / "subDir" / name ) as testFile :
							self.assertEqual( testFile.readline(), "# This file was automatically generated by Gaffer.\n" )
							self.assertEqual( testFile.readline(), "# {} {}".format( name, previousVersions[-1] ) )

					# But we don't expect the others to have been, because they were
					# created explicitly by the user. If they were created in `startup`
					# then they will be run anyway, and if they were created in `startup-{version}`
					# then the user only intends them to be run in that version.

					self.assertFalse( ( expectedDir / "userGenerated1.py" ).exists() )
					self.assertFalse( ( expectedDir / "subDir" / "userGenerated2.py" ).exists() )

					# Check that no other files were created unexpectedly.

					self.assertEqual(
						{ d.name for d in ( testHome / "gaffer" ).iterdir() },
						{ d.name for d in previousStartupDirs } | { expectedDir.name }
					)

	@unittest.skipIf( os.name == "nt", "Process name is not controllable on Windows.")
	def testProcessName( self ) :

		process = subprocess.Popen( [ str( Gaffer.executablePath() ), "env", "sleep", "100" ] )
		time.sleep( 1 )
		command = subprocess.check_output( [ "ps", "-p", str( process.pid ), "-o", "command=" ], universal_newlines = True ).strip()
		name = subprocess.check_output( [ "ps", "-p", str( process.pid ), "-o", "comm=" ], universal_newlines = True ).strip()
		process.kill()

		self.assertEqual( command, "gaffer env sleep 100" )
		self.assertEqual( name, "gaffer" )

if __name__ == "__main__":
	unittest.main()
