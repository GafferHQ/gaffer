import Gaffer
import GafferImage
import IECore
import imath

Gaffer.Metadata.registerValue( parent, "serialiser:milestoneVersion", 1, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:majorVersion", 5, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:minorVersion", 0, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:patchVersion", 0, persistent=False )

__children = {}

parent["variables"].addChild( Gaffer.NameValuePlug( "image:catalogue:port", Gaffer.IntPlug( "value", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "imageCataloguePort", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
parent["variables"].addChild( Gaffer.NameValuePlug( "project:name", Gaffer.StringPlug( "value", defaultValue = 'default', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "projectName", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
parent["variables"].addChild( Gaffer.NameValuePlug( "project:rootDirectory", Gaffer.StringPlug( "value", defaultValue = '$HOME/gaffer/projects/${project:name}', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "projectRootDirectory", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["openColorIO"] = GafferImage.OpenColorIOConfigPlug( "openColorIO", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["openColorIO"] )
__children["defaultFormat"] = GafferImage.FormatPlug( "defaultFormat", defaultValue = GafferImage.Format( 1920, 1080, 1.000 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["defaultFormat"] )
__children["MetadataOverlay"] = Gaffer.Box( "MetadataOverlay" )
parent.addChild( __children["MetadataOverlay"] )
__children["MetadataOverlay"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MetadataOverlay"].addChild( GafferImage.Text( "Text" ) )
__children["MetadataOverlay"]["Text"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MetadataOverlay"].addChild( Gaffer.BoxIn( "BoxIn" ) )
__children["MetadataOverlay"]["BoxIn"].setup( GafferImage.ImagePlug( "out", ) )
__children["MetadataOverlay"]["BoxIn"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MetadataOverlay"].addChild( GafferImage.ImagePlug( "in", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MetadataOverlay"].addChild( Gaffer.BoxOut( "BoxOut" ) )
__children["MetadataOverlay"]["BoxOut"].setup( GafferImage.ImagePlug( "in", ) )
__children["MetadataOverlay"]["BoxOut"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MetadataOverlay"].addChild( GafferImage.ImagePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MetadataOverlay"].addChild( Gaffer.BoolPlug( "enabled", defaultValue = True, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MetadataOverlay"].addChild( Gaffer.Dot( "Dot" ) )
__children["MetadataOverlay"]["Dot"].setup( GafferImage.ImagePlug( "in", ) )
__children["MetadataOverlay"]["Dot"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MetadataOverlay"].addChild( GafferImage.FormatQuery( "FormatQuery" ) )
__children["MetadataOverlay"]["FormatQuery"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MetadataOverlay"].addChild( Gaffer.FloatPlug( "marginLeft", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MetadataOverlay"].addChild( Gaffer.FloatPlug( "marginRight", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MetadataOverlay"].addChild( Gaffer.FloatPlug( "marginTop", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MetadataOverlay"].addChild( Gaffer.FloatPlug( "marginBottom", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MetadataOverlay"].addChild( Gaffer.IntPlug( "horizontalAlignment", defaultValue = 0, minValue = 0, maxValue = 2, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MetadataOverlay"].addChild( Gaffer.IntPlug( "verticalAlignment", defaultValue = 1, minValue = 0, maxValue = 2, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MetadataOverlay"].addChild( Gaffer.Expression( "AreaExpression" ) )
__children["MetadataOverlay"]["AreaExpression"]["__in"].addChild( Gaffer.V2iPlug( "p0", defaultValue = imath.V2i( -2147483648, -2147483648 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MetadataOverlay"]["AreaExpression"]["__in"].addChild( Gaffer.V2iPlug( "p1", defaultValue = imath.V2i( 2147483647, 2147483647 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MetadataOverlay"]["AreaExpression"]["__in"].addChild( Gaffer.FloatPlug( "p2", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MetadataOverlay"]["AreaExpression"]["__in"].addChild( Gaffer.FloatPlug( "p3", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MetadataOverlay"]["AreaExpression"]["__in"].addChild( Gaffer.FloatPlug( "p4", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MetadataOverlay"]["AreaExpression"]["__in"].addChild( Gaffer.FloatPlug( "p5", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MetadataOverlay"]["AreaExpression"]["__out"].addChild( Gaffer.Box2iPlug( "p0", direction = Gaffer.Plug.Direction.Out, defaultValue = imath.Box2i(), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MetadataOverlay"]["AreaExpression"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MetadataOverlay"].addChild( Gaffer.StringPlug( "metadata", defaultValue = '*', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MetadataOverlay"].addChild( Gaffer.Color4fPlug( "fontColor", defaultValue = imath.Color4f( 1, 1, 1, 1 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MetadataOverlay"].addChild( Gaffer.StringPlug( "font", defaultValue = 'Vera.ttf', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MetadataOverlay"].addChild( Gaffer.V2iPlug( "fontSize", defaultValue = imath.V2i( 20, 20 ), minValue = imath.V2i( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MetadataOverlay"].addChild( Gaffer.Expression( "TextExpression" ) )
__children["MetadataOverlay"]["TextExpression"]["__in"].addChild( Gaffer.StringPlug( "p0", defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MetadataOverlay"]["TextExpression"]["__in"].addChild( Gaffer.AtomicCompoundDataPlug( "p1", defaultValue = IECore.CompoundData(), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MetadataOverlay"]["TextExpression"]["__in"].addChild( Gaffer.StringPlug( "p2", defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MetadataOverlay"]["TextExpression"]["__in"].addChild( Gaffer.StringPlug( "p3", defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MetadataOverlay"]["TextExpression"]["__in"].addChild( Gaffer.IntPlug( "p4", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MetadataOverlay"]["TextExpression"]["__out"].addChild( Gaffer.StringPlug( "p0", direction = Gaffer.Plug.Direction.Out, defaultValue = 'Hello World', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MetadataOverlay"]["TextExpression"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MetadataOverlay"].addChild( Gaffer.BoolPlug( "shadow", defaultValue = False, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MetadataOverlay"].addChild( Gaffer.Color4fPlug( "shadowColor", defaultValue = imath.Color4f( 0, 0, 0, 1 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MetadataOverlay"].addChild( Gaffer.V2fPlug( "shadowOffset", defaultValue = imath.V2f( 5, -5 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MetadataOverlay"].addChild( Gaffer.FloatPlug( "shadowBlur", defaultValue = 0.0, minValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MetadataOverlay"].addChild( Gaffer.StringPlug( "itemFormat", defaultValue = '{name} : {value}', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MetadataOverlay"].addChild( Gaffer.IntPlug( "mode", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["MetadataOverlay"].addChild( Gaffer.StringPlug( "customFormat", defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ImageReader"] = GafferImage.ImageReader( "ImageReader" )
parent.addChild( __children["ImageReader"] )
__children["ImageReader"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
parent["variables"]["imageCataloguePort"]["value"].setValue( 41603 )
Gaffer.Metadata.registerValue( parent["variables"]["imageCataloguePort"], 'readOnly', True )
Gaffer.Metadata.registerValue( parent["variables"]["projectName"]["name"], 'readOnly', True )
Gaffer.Metadata.registerValue( parent["variables"]["projectRootDirectory"]["name"], 'readOnly', True )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"], 'uiEditor:emptySections', IECore.StringVectorData( [  ] ) )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"], 'uiEditor:emptySectionIndices', IECore.IntVectorData( [  ] ) )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"], 'noduleLayout:customGadget:addButtonTop:visible', False )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"], 'noduleLayout:customGadget:addButtonBottom:visible', False )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"], 'noduleLayout:customGadget:addButtonLeft:visible', False )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"], 'noduleLayout:customGadget:addButtonRight:visible', False )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"], 'layout:activator:modeIsStandard', 'parent["mode"].getValue() == 0' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"], 'layout:activator:modeIsCustom', 'parent["mode"].getValue() == 1' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"], 'description', 'Formats metadata into a text overlay on top of the image. Provides control over formatting, font, layout and a drop shadow.' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["user"], 'layout:section', 'User' )
__children["MetadataOverlay"]["__uiPosition"].setValue( imath.V2f( -5.10000038, 0.311785698 ) )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["__uiPosition"], 'layout:section', 'Settings' )
__children["MetadataOverlay"]["Text"]["in"].setInput( __children["MetadataOverlay"]["BoxIn"]["out"] )
__children["MetadataOverlay"]["Text"]["color"].setInput( __children["MetadataOverlay"]["fontColor"] )
__children["MetadataOverlay"]["Text"]["shadow"].setInput( __children["MetadataOverlay"]["shadow"] )
__children["MetadataOverlay"]["Text"]["shadowColor"].setInput( __children["MetadataOverlay"]["shadowColor"] )
__children["MetadataOverlay"]["Text"]["shadowOffset"].setInput( __children["MetadataOverlay"]["shadowOffset"] )
__children["MetadataOverlay"]["Text"]["shadowBlur"].setInput( __children["MetadataOverlay"]["shadowBlur"] )
__children["MetadataOverlay"]["Text"]["text"].setInput( __children["MetadataOverlay"]["TextExpression"]["__out"]["p0"] )
__children["MetadataOverlay"]["Text"]["font"].setInput( __children["MetadataOverlay"]["font"] )
__children["MetadataOverlay"]["Text"]["size"].setInput( __children["MetadataOverlay"]["fontSize"] )
__children["MetadataOverlay"]["Text"]["area"].setInput( __children["MetadataOverlay"]["AreaExpression"]["__out"]["p0"] )
__children["MetadataOverlay"]["Text"]["horizontalAlignment"].setInput( __children["MetadataOverlay"]["horizontalAlignment"] )
__children["MetadataOverlay"]["Text"]["verticalAlignment"].setInput( __children["MetadataOverlay"]["verticalAlignment"] )
__children["MetadataOverlay"]["Text"]["__uiPosition"].setValue( imath.V2f( -4.0999999, 2.91764784 ) )
__children["MetadataOverlay"]["BoxIn"]["__in"].setInput( __children["MetadataOverlay"]["in"] )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["BoxIn"]["__in"], 'description', 'The output image generated by this node.' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["BoxIn"]["__in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["BoxIn"]["out"], 'noduleLayout:section', 'bottom' )
__children["MetadataOverlay"]["BoxIn"]["__uiPosition"].setValue( imath.V2f( 6.28547907, 20.4480972 ) )
__children["MetadataOverlay"]["in"].setInput( __children["ImageReader"]["out"] )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["in"], 'description', 'The input image.' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["in"], 'noduleLayout:section', 'top' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["in"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["in"], 'layout:index', 1 )
__children["MetadataOverlay"]["BoxOut"]["in"].setInput( __children["MetadataOverlay"]["Text"]["out"] )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["BoxOut"]["__out"], 'description', 'The output image generated by this node.' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["BoxOut"]["__out"], 'nodule:type', 'GafferUI::StandardNodule' )
__children["MetadataOverlay"]["BoxOut"]["passThrough"].setInput( __children["MetadataOverlay"]["Dot"]["out"] )
__children["MetadataOverlay"]["BoxOut"]["enabled"].setInput( __children["MetadataOverlay"]["enabled"] )
__children["MetadataOverlay"]["BoxOut"]["__uiPosition"].setValue( imath.V2f( -2.5999999, -21.0977783 ) )
__children["MetadataOverlay"]["out"].setInput( __children["MetadataOverlay"]["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["out"], 'description', 'The output image, with metadata overlayed as text.' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["out"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["out"], 'layout:index', 2 )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["enabled"], 'layout:section', 'Node' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["enabled"], 'layout:index', 19 )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["enabled"], 'description', 'Turns the overlay on and off.' )
__children["MetadataOverlay"]["Dot"]["in"].setInput( __children["MetadataOverlay"]["BoxIn"]["out"] )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["Dot"]["in"], 'noduleLayout:section', 'top' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["Dot"]["out"], 'noduleLayout:section', 'bottom' )
__children["MetadataOverlay"]["Dot"]["__uiPosition"].setValue( imath.V2f( 6.28547907, -13.5977783 ) )
__children["MetadataOverlay"]["FormatQuery"]["image"].setInput( __children["MetadataOverlay"]["BoxIn"]["out"] )
__children["MetadataOverlay"]["FormatQuery"]["__uiPosition"].setValue( imath.V2f( -10.7706127, 13.8205109 ) )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["marginLeft"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["marginLeft"], 'layout:section', 'Settings.Layout' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["marginLeft"], 'layout:index', 11 )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["marginLeft"], 'description', 'Gap between the text area and the left of the input image, measured in pixels.' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["marginRight"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["marginRight"], 'layout:section', 'Settings.Layout' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["marginRight"], 'layout:index', 12 )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["marginRight"], 'description', 'Gap between the text area and the right of the input image, measured in pixels.' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["marginTop"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["marginTop"], 'layout:section', 'Settings.Layout' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["marginTop"], 'layout:index', 9 )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["marginTop"], 'description', 'Gap between the text area and the top of the input image, measured in pixels.' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["marginBottom"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["marginBottom"], 'layout:section', 'Settings.Layout' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["marginBottom"], 'layout:index', 10 )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["marginBottom"], 'description', 'Gap between the text area and the bottom of the input image, measured in pixels.' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["horizontalAlignment"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["horizontalAlignment"], 'description', 'Determines whether the text is aligned to the left or\nright of the text area, or centered within it.' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["horizontalAlignment"], 'plugValueWidget:type', 'GafferUI.PresetsPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["horizontalAlignment"], 'preset:Left', 0 )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["horizontalAlignment"], 'preset:Right', 1 )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["horizontalAlignment"], 'preset:Center', 2 )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["horizontalAlignment"], 'layout:section', 'Settings.Layout' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["horizontalAlignment"], 'layout:index', 13 )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["verticalAlignment"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["verticalAlignment"], 'description', 'Determines whether the text is aligned to the bottom or\ntop of the text area, or centered within it.' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["verticalAlignment"], 'plugValueWidget:type', 'GafferUI.PresetsPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["verticalAlignment"], 'preset:Bottom', 0 )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["verticalAlignment"], 'preset:Top', 1 )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["verticalAlignment"], 'preset:Center', 2 )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["verticalAlignment"], 'layout:section', 'Settings.Layout' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["verticalAlignment"], 'layout:index', 14 )
__children["MetadataOverlay"]["AreaExpression"]["__in"]["p0"].setInput( __children["MetadataOverlay"]["FormatQuery"]["format"]["displayWindow"]["max"] )
__children["MetadataOverlay"]["AreaExpression"]["__in"]["p1"].setInput( __children["MetadataOverlay"]["FormatQuery"]["format"]["displayWindow"]["min"] )
__children["MetadataOverlay"]["AreaExpression"]["__in"]["p2"].setInput( __children["MetadataOverlay"]["marginBottom"] )
__children["MetadataOverlay"]["AreaExpression"]["__in"]["p3"].setInput( __children["MetadataOverlay"]["marginLeft"] )
__children["MetadataOverlay"]["AreaExpression"]["__in"]["p4"].setInput( __children["MetadataOverlay"]["marginRight"] )
__children["MetadataOverlay"]["AreaExpression"]["__in"]["p5"].setInput( __children["MetadataOverlay"]["marginTop"] )
__children["MetadataOverlay"]["AreaExpression"]["__uiPosition"].setValue( imath.V2f( -14.5991678, 2.91848898 ) )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["metadata"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["metadata"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["metadata"], 'layout:index', 3 )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["metadata"], 'description', "The metadata to include in the overlay when in Standard mode. Accepts a space-separated list of names, and supports Gaffer's standard wildcards. Metadata is added to the image in the order defined here, with wildcard matches being sorted alphabetically." )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["metadata"], 'layout:visibilityActivator', 'modeIsStandard' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["fontColor"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["fontColor"], 'description', 'The colour of the text.' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["fontColor"], 'layout:section', 'Settings.Font' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["fontColor"], 'layout:index', 8 )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["font"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["font"], 'description', 'The font to render the metadata with. This should be a .ttf font file which\nis located on the paths specified by the IECORE_FONT_PATHS\nenvironment variable.' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["font"], 'plugValueWidget:type', 'GafferUI.FileSystemPathPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["font"], 'path:bookmarks', 'font' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["font"], 'path:leaf', True )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["font"], 'path:valid', True )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["font"], 'fileSystemPath:extensions', 'ttf' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["font"], 'layout:section', 'Settings.Font' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["font"], 'layout:index', 6 )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["fontSize"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["fontSize"], 'description', 'The size of the font in pixels.' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["fontSize"], 'layout:section', 'Settings.Font' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["fontSize"], 'layout:index', 7 )
__children["MetadataOverlay"]["TextExpression"]["__in"]["p0"].setInput( __children["MetadataOverlay"]["customFormat"] )
__children["MetadataOverlay"]["TextExpression"]["__in"]["p1"].setInput( __children["MetadataOverlay"]["in"]["metadata"] )
__children["MetadataOverlay"]["TextExpression"]["__in"]["p2"].setInput( __children["MetadataOverlay"]["itemFormat"] )
__children["MetadataOverlay"]["TextExpression"]["__in"]["p3"].setInput( __children["MetadataOverlay"]["metadata"] )
__children["MetadataOverlay"]["TextExpression"]["__in"]["p4"].setInput( __children["MetadataOverlay"]["mode"] )
__children["MetadataOverlay"]["TextExpression"]["__uiPosition"].setValue( imath.V2f( 3.9000001, 2.9184618 ) )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["shadow"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["shadow"], 'description', 'Enables the rendering of a drop shadow which can be coloured, offset and\nblurred.' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["shadow"], 'layout:section', 'Settings.Shadow' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["shadow"], 'layout:index', 15 )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["shadowColor"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["shadowColor"], 'description', 'The colour of the shadow.' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["shadowColor"], 'layout:section', 'Settings.Shadow' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["shadowColor"], 'layout:index', 16 )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["shadowOffset"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["shadowOffset"], 'description', 'The offset of the shadow, measured in pixels.' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["shadowOffset"], 'layout:section', 'Settings.Shadow' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["shadowOffset"], 'layout:index', 17 )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["shadowBlur"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["shadowBlur"], 'description', 'A blur applied to the shadow, measured in pixels.' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["shadowBlur"], 'layout:section', 'Settings.Shadow' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["shadowBlur"], 'layout:index', 18 )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["itemFormat"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["itemFormat"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["itemFormat"], 'layout:index', 4 )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["itemFormat"], 'description', 'The format of each line of metadata when in Standard mode. Use `{name}` to refer to the name of the metadata, and `{value}` to refer to its value.' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["itemFormat"], 'layout:visibilityActivator', 'modeIsStandard' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["mode"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["mode"], 'plugValueWidget:type', 'GafferUI.PresetsPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["mode"], 'preset:Standard', 0 )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["mode"], 'preset:Custom', 1 )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["mode"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["mode"], 'layout:index', 0 )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["mode"], 'description', 'Determines the method used to format the metadata as text :\n\n- Standard : Formats one item of metadata per line, using the template specified by `itemFormat`. Only shows the items matched by the `metadata` plug.\n- Custom : Uses `customFormat` to define custom formatting, including custom labels and multiple items of metadata on a single line.' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["customFormat"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["customFormat"], 'plugValueWidget:type', 'GafferUI.MultiLineStringPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["customFormat"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["customFormat"], 'layout:index', 5 )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["customFormat"], 'description', 'Format of the entire metadata overlay in Custom mode. Use `{<metadataName>}` to include individual values. This allows arbitrary formatting, including multiple metadata values on a single line. ' )
Gaffer.Metadata.registerValue( __children["MetadataOverlay"]["customFormat"], 'layout:visibilityActivator', 'modeIsCustom' )
__children["ImageReader"]["fileName"].setValue( '${GAFFER_ROOT}/resources/hdri/studio.exr' )
__children["ImageReader"]["__uiPosition"].setValue( imath.V2f( -5.10000038, 11.1000013 ) )
__children["MetadataOverlay"]["AreaExpression"]["__engine"].setValue( 'python' )
__children["MetadataOverlay"]["AreaExpression"]["__expression"].setValue( 'import imath\nparent["__out"]["p0"] = imath.Box2i(\n\tparent["__in"]["p1"] + imath.V2i(\n\t\tparent["__in"]["p3"], parent["__in"]["p2"]\n\t),\n\tparent["__in"]["p0"] - imath.V2i(\n\t\tparent["__in"]["p4"], parent["__in"]["p5"]\n\t),\n)' )
__children["MetadataOverlay"]["TextExpression"]["__engine"].setValue( 'python' )
__children["MetadataOverlay"]["TextExpression"]["__expression"].setValue( 'import collections\nimport IECore\n\nmetadata = parent["__in"]["p1"]\nmetadataPattern = parent["__in"]["p3"]\nitemFormat = parent["__in"]["p2"]\nformatMode = parent["__in"]["p4"]\n\n# Build format string\n\nif formatMode == 0 : # Standard\n\n\t\tdef appendItem( format, key ) :\n\t\t\n\t\t\tif format :\n\t\t\t\tformat += "\\n"\n\t\t\t\t\n\t\t\t# The field name in a format string can\'t contain\n\t\t\t# \':\', because that is used as a separator.\n\t\t\tformatKey = key.replace( ":", "_" )\n\t\t\t \n\t\t\titemFormatDict = collections.defaultdict( str )\n\t\t\titemFormatDict.update( { "name" : key, "value" : f"{{{formatKey}}}" } )\n\t\t\t \t\t\n\t\t\tformat += itemFormat.format_map( itemFormatDict )\n\t\t\t\n\t\t\treturn format\n\n\t\tformat = ""\n\t\tavailableKeys = set( metadata.keys() )\n\t\t\n\t\t# Iterate over patterns rather than use `StringAlgo.matchMultiple()`\n\t\t# so that users can control the ordering of explicitly entered names.\n\t\tfor pattern in metadataPattern.split() :\n\t\t\n\t\t\tif not IECore.StringAlgo.hasWildcards( pattern ) :\n\t\t\t\tformat = appendItem( format, pattern )\n\t\t\t\tavailableKeys.discard( pattern )\n\t\t\telse :\n\t\t\t\tfor key in sorted( availableKeys ) :\n\t\t\t\t\tif IECore.StringAlgo.match( key, pattern ) :\n\t\t\t\t\t\tformat = appendItem( format, key )\n\t\t\t\t\t\tavailableKeys.discard( key )\n\nelse : # Custom\n\n\t\tformat = parent["__in"]["p0"]\n\n# Build format dict to provide values for format string\n\nformatDict = collections.defaultdict( str )\nfor key, value in metadata.items() :\n\tkey = key.replace( ":", "_" )\n\tif hasattr( value, "value" ) :\n\t\t# Unwrap things like IntData so that we can use\n\t\t# format specifiers for padding etc.\n\t\tvalue = value.value\n\tformatDict[key] = value\n\n# Assign text\n\nparent["__out"]["p0"] = format.format_map( formatDict )' )


del __children
