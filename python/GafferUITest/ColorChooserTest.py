##########################################################################
#
#  Copyright (c) 2024, Cinesite VFX Ltd. All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are
#  met:
#
#      * Redistributions of source code must retain the above
#        copyright notice, this list of conditions and the following
#        disclaimer.
#
#      * Redistributions in binary form must reproduce the above
#        copyright notice, this list of conditions and the following
#        disclaimer in the documentation and/or other materials provided with
#        the distribution.
#
#      * Neither the name of John Haddon nor the names of
#        any other contributors to this software may be used to endorse or
#        promote products derived from this software without specific prior
#        written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
#  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
#  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
#  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
#  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
#  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
##########################################################################

import pathlib
import unittest

import imath
import OpenImageIO

from GafferUI.ColorChooser import _tmiToRGB
from GafferUI.ColorChooser import _rgbToTMI
import GafferUITest

class ColorChooserTest( GafferUITest.TestCase ) :

	def testTMI( self ) :
		# Load a precomputed image generated by Houdini to test our TMI <-> RGB calculation.
		# The image is 200px x 20px. Each 20px square varies the temperature from -1.0 to 1.0
		# on the X axis and magenta from -1.0 to 1.0 on the Y-axis. Each of the 10 squares, from
		# left to right, varies the intensity from 0.0 to 0.9.
		tileWidth = 20
		tileCount = 10
		tmiTargetImage = OpenImageIO.ImageBuf( ( pathlib.Path( __file__ ).parent / "images" / "tmi.exr" ).as_posix() )

		for tile in range ( 0, tileCount ) :
			for y in range( 0, tileWidth ) :
				for x in range( 0, tileWidth ) :
					tmiOriginal = imath.Color3f(
						( float( x ) / tileWidth ) * 2.0 - 1.0,
						( float( y ) / tileWidth ) * 2.0 - 1.0,
						float( tile ) / tileCount
					)

					rgbConverted = _tmiToRGB( tmiOriginal )
					tmiTarget = tmiTargetImage.getpixel( x + ( tile * tileWidth ), y )
					self.assertAlmostEqual( tmiTarget[0], rgbConverted.r, places = 6 )
					self.assertAlmostEqual( tmiTarget[1], rgbConverted.g, places = 6 )
					self.assertAlmostEqual( tmiTarget[2], rgbConverted.b, places = 6 )

					tmiConverted = _rgbToTMI( rgbConverted )
					self.assertAlmostEqual( tmiConverted.r, tmiOriginal.r, places = 6 )
					self.assertAlmostEqual( tmiConverted.g, tmiOriginal.g, places = 6 )
					self.assertAlmostEqual( tmiConverted.b, tmiOriginal.b, places = 6 )

	def testTMIAlpha( self ) :

		rgb = imath.Color4f( 0.5 )
		tmi = _rgbToTMI( rgb )
		self.assertEqual( tmi.a, rgb.a )

		rgbConverted = _tmiToRGB( tmi )
		self.assertEqual( rgbConverted.a, rgb.a )


if __name__ == "__main__" :
	unittest.main()