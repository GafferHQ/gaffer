import Gaffer
import GafferOSL
import IECore

Gaffer.Metadata.registerNodeValue( parent, "serialiser:milestoneVersion", 0, persistent=False )
Gaffer.Metadata.registerNodeValue( parent, "serialiser:majorVersion", 23, persistent=False )
Gaffer.Metadata.registerNodeValue( parent, "serialiser:minorVersion", 2, persistent=False )
Gaffer.Metadata.registerNodeValue( parent, "serialiser:patchVersion", 0, persistent=False )

__children = {}

parent["variables"].addChild( Gaffer.CompoundDataPlug.MemberPlug( "projectName", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
parent["variables"]["projectName"].addChild( Gaffer.StringPlug( "name", defaultValue = 'project:name', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
parent["variables"]["projectName"].addChild( Gaffer.StringPlug( "value", defaultValue = 'default', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
parent["variables"].addChild( Gaffer.CompoundDataPlug.MemberPlug( "projectRootDirectory", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
parent["variables"]["projectRootDirectory"].addChild( Gaffer.StringPlug( "name", defaultValue = 'project:rootDirectory', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
parent["variables"]["projectRootDirectory"].addChild( Gaffer.StringPlug( "value", defaultValue = '$HOME/gaffer/projects/${project:name}', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["InFloat"] = GafferOSL.OSLShader( "InFloat" )
parent.addChild( __children["InFloat"] )
__children["InFloat"]["name"].setValue( 'ObjectProcessing/InFloat' )
__children["InFloat"]["type"].setValue( 'osl:shader' )
__children["InFloat"]["parameters"].addChild( Gaffer.StringPlug( "name", defaultValue = 's', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["InFloat"]["parameters"].addChild( Gaffer.FloatPlug( "defaultValue", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["InFloat"]["parameters"]["defaultValue"].setValue( 1.0 )
__children["InFloat"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = IECore.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["InFloat"]["__uiPosition"].setValue( IECore.V2f( -11.5499992, 7.5999999 ) )
__children["InFloat"].addChild( Gaffer.Plug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["InFloat"]["out"].addChild( Gaffer.FloatPlug( "value", direction = Gaffer.Plug.Direction.Out, defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["InFloat1"] = GafferOSL.OSLShader( "InFloat1" )
parent.addChild( __children["InFloat1"] )
__children["InFloat1"]["name"].setValue( 'ObjectProcessing/InFloat' )
__children["InFloat1"]["type"].setValue( 'osl:shader' )
__children["InFloat1"]["parameters"].addChild( Gaffer.StringPlug( "name", defaultValue = 's', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["InFloat1"]["parameters"]["name"].setValue( 't' )
__children["InFloat1"]["parameters"].addChild( Gaffer.FloatPlug( "defaultValue", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["InFloat1"]["parameters"]["defaultValue"].setValue( 0.5 )
__children["InFloat1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = IECore.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["InFloat1"]["__uiPosition"].setValue( IECore.V2f( -11.4499979, 2.400002 ) )
__children["InFloat1"].addChild( Gaffer.V2fPlug( "__uiPosition1", defaultValue = IECore.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["InFloat1"].addChild( Gaffer.Plug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["InFloat1"]["out"].addChild( Gaffer.FloatPlug( "value", direction = Gaffer.Plug.Direction.Out, defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["InFloat2"] = GafferOSL.OSLShader( "InFloat2" )
parent.addChild( __children["InFloat2"] )
__children["InFloat2"]["name"].setValue( 'ObjectProcessing/InFloat' )
__children["InFloat2"]["type"].setValue( 'osl:shader' )
__children["InFloat2"]["parameters"].addChild( Gaffer.StringPlug( "name", defaultValue = 's', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["InFloat2"]["parameters"]["name"].setValue( 'u' )
__children["InFloat2"]["parameters"].addChild( Gaffer.FloatPlug( "defaultValue", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["InFloat2"]["parameters"]["defaultValue"].setValue( 0.25 )
__children["InFloat2"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = IECore.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["InFloat2"]["__uiPosition"].setValue( IECore.V2f( -11.4500008, -2.70000076 ) )
__children["InFloat2"].addChild( Gaffer.V2fPlug( "__uiPosition1", defaultValue = IECore.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["InFloat2"].addChild( Gaffer.V2fPlug( "__uiPosition2", defaultValue = IECore.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["InFloat2"].addChild( Gaffer.Plug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["InFloat2"]["out"].addChild( Gaffer.FloatPlug( "value", direction = Gaffer.Plug.Direction.Out, defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BuildPoint"] = GafferOSL.OSLShader( "BuildPoint" )
parent.addChild( __children["BuildPoint"] )
__children["BuildPoint"]["name"].setValue( 'Utility/BuildPoint' )
__children["BuildPoint"]["type"].setValue( 'osl:shader' )
__children["BuildPoint"]["parameters"].addChild( Gaffer.FloatPlug( "x", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BuildPoint"]["parameters"].addChild( Gaffer.FloatPlug( "y", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BuildPoint"]["parameters"].addChild( Gaffer.FloatPlug( "z", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BuildPoint"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = IECore.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BuildPoint"]["__uiPosition"].setValue( IECore.V2f( 1.64912295, 2.43312955 ) )
__children["BuildPoint"].addChild( Gaffer.Plug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BuildPoint"]["out"].addChild( Gaffer.V3fPlug( "p", direction = Gaffer.Plug.Direction.Out, defaultValue = IECore.V3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OutPoint"] = GafferOSL.OSLShader( "OutPoint" )
parent.addChild( __children["OutPoint"] )
__children["OutPoint"]["name"].setValue( 'ObjectProcessing/OutPoint' )
__children["OutPoint"]["type"].setValue( 'osl:shader' )
__children["OutPoint"]["parameters"].addChild( Gaffer.StringPlug( "name", defaultValue = 'P', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OutPoint"]["parameters"]["name"].setValue( 'stu' )
__children["OutPoint"]["parameters"].addChild( Gaffer.V3fPlug( "value", defaultValue = IECore.V3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OutPoint"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = IECore.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OutPoint"]["__uiPosition"].setValue( IECore.V2f( 14.9662437, 3.03401327 ) )
__children["OutPoint"].addChild( Gaffer.Plug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OutPoint"]["out"].addChild( Gaffer.Plug( "primitiveVariable", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OutObject"] = GafferOSL.OSLShader( "OutObject" )
parent.addChild( __children["OutObject"] )
__children["OutObject"]["name"].setValue( 'ObjectProcessing/OutObject' )
__children["OutObject"]["type"].setValue( 'osl:surface' )
__children["OutObject"]["parameters"].addChild( Gaffer.Plug( "in0", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OutObject"]["parameters"].addChild( Gaffer.Plug( "in1", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OutObject"]["parameters"].addChild( Gaffer.Plug( "in2", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OutObject"]["parameters"].addChild( Gaffer.Plug( "in3", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OutObject"]["parameters"].addChild( Gaffer.Plug( "in4", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OutObject"]["parameters"].addChild( Gaffer.Plug( "in5", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OutObject"]["parameters"].addChild( Gaffer.Plug( "in6", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OutObject"]["parameters"].addChild( Gaffer.Plug( "in7", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OutObject"]["parameters"].addChild( Gaffer.Plug( "in8", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OutObject"]["parameters"].addChild( Gaffer.Plug( "in9", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OutObject"]["parameters"].addChild( Gaffer.Plug( "in10", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OutObject"]["parameters"].addChild( Gaffer.Plug( "in11", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OutObject"]["parameters"].addChild( Gaffer.Plug( "in12", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OutObject"]["parameters"].addChild( Gaffer.Plug( "in13", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OutObject"]["parameters"].addChild( Gaffer.Plug( "in14", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OutObject"]["parameters"].addChild( Gaffer.Plug( "in15", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OutObject"].addChild( Gaffer.Plug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OutObject"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = IECore.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OutObject"]["__uiPosition"].setValue( IECore.V2f( 28.2387047, -5.96510887 ) )
parent["variables"]["projectName"]["name"].setFlags( Gaffer.Plug.Flags.ReadOnly, True )
parent["variables"]["projectRootDirectory"]["name"].setFlags( Gaffer.Plug.Flags.ReadOnly, True )
__children["BuildPoint"]["parameters"]["x"].setInput( __children["InFloat"]["out"]["value"] )
__children["BuildPoint"]["parameters"]["y"].setInput( __children["InFloat1"]["out"]["value"] )
__children["BuildPoint"]["parameters"]["z"].setInput( __children["InFloat2"]["out"]["value"] )
__children["OutPoint"]["parameters"]["value"].setInput( __children["BuildPoint"]["out"]["p"] )
__children["OutPoint"]["parameters"]["value"]["x"].setInput( __children["BuildPoint"]["out"]["p"]["x"] )
__children["OutPoint"]["parameters"]["value"]["y"].setInput( __children["BuildPoint"]["out"]["p"]["y"] )
__children["OutPoint"]["parameters"]["value"]["z"].setInput( __children["BuildPoint"]["out"]["p"]["z"] )
__children["OutObject"]["parameters"]["in0"].setInput( __children["OutPoint"]["out"]["primitiveVariable"] )
__children["InFloat"].loadShader( "ObjectProcessing/InFloat", keepExistingValues=True )
__children["InFloat1"].loadShader( "ObjectProcessing/InFloat", keepExistingValues=True )
__children["InFloat2"].loadShader( "ObjectProcessing/InFloat", keepExistingValues=True )
__children["BuildPoint"].loadShader( "Utility/BuildPoint", keepExistingValues=True )
__children["OutPoint"].loadShader( "ObjectProcessing/OutPoint", keepExistingValues=True )
__children["OutObject"].loadShader( "ObjectProcessing/OutObject", keepExistingValues=True )


del __children
