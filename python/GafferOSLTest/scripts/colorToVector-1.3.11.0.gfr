import Gaffer
import GafferImage
import GafferOSL
import imath

Gaffer.Metadata.registerValue( parent, "serialiser:milestoneVersion", 1, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:majorVersion", 3, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:minorVersion", 11, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:patchVersion", 0, persistent=False )

__children = {}

parent["variables"].addChild( Gaffer.NameValuePlug( "image:catalogue:port", Gaffer.IntPlug( "value", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "imageCataloguePort", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
parent["variables"].addChild( Gaffer.NameValuePlug( "project:name", Gaffer.StringPlug( "value", defaultValue = 'default', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "projectName", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
parent["variables"].addChild( Gaffer.NameValuePlug( "project:rootDirectory", Gaffer.StringPlug( "value", defaultValue = '$HOME/gaffer/projects/${project:name}', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "projectRootDirectory", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["openColorIO"] = GafferImage.OpenColorIOConfigPlug( "openColorIO", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["openColorIO"] )
__children["defaultFormat"] = GafferImage.FormatPlug( "defaultFormat", defaultValue = GafferImage.Format( 1920, 1080, 1.000 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["defaultFormat"] )
__children["ColorToVector"] = GafferOSL.OSLShader( "ColorToVector" )
parent.addChild( __children["ColorToVector"] )
__children["ColorToVector"].loadShader( "Conversion/ColorToVector" )
__children["ColorToVector"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["VectorToColor"] = GafferOSL.OSLShader( "VectorToColor" )
parent.addChild( __children["VectorToColor"] )
__children["VectorToColor"].loadShader( "Conversion/VectorToColor" )
__children["VectorToColor"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["VectorToColor1"] = GafferOSL.OSLShader( "VectorToColor1" )
parent.addChild( __children["VectorToColor1"] )
__children["VectorToColor1"].loadShader( "Conversion/VectorToColor" )
__children["VectorToColor1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ColorToVector1"] = GafferOSL.OSLShader( "ColorToVector1" )
parent.addChild( __children["ColorToVector1"] )
__children["ColorToVector1"].loadShader( "Conversion/ColorToVector" )
__children["ColorToVector1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ColorToFloat"] = GafferOSL.OSLShader( "ColorToFloat" )
parent.addChild( __children["ColorToFloat"] )
__children["ColorToFloat"].loadShader( "Conversion/ColorToFloat" )
__children["ColorToFloat"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["FloatToColor"] = GafferOSL.OSLShader( "FloatToColor" )
parent.addChild( __children["FloatToColor"] )
__children["FloatToColor"].loadShader( "Conversion/FloatToColor" )
__children["FloatToColor"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ColorToVector2"] = GafferOSL.OSLShader( "ColorToVector2" )
parent.addChild( __children["ColorToVector2"] )
__children["ColorToVector2"].loadShader( "Conversion/ColorToVector" )
__children["ColorToVector2"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
parent["variables"]["imageCataloguePort"]["value"].setValue( 41613 )
Gaffer.Metadata.registerValue( parent["variables"]["imageCataloguePort"], 'readOnly', True )
Gaffer.Metadata.registerValue( parent["variables"]["projectName"]["name"], 'readOnly', True )
Gaffer.Metadata.registerValue( parent["variables"]["projectRootDirectory"]["name"], 'readOnly', True )
__children["ColorToVector"]["parameters"]["col"].setInput( __children["VectorToColor"]["out"]["c"] )
__children["ColorToVector"]["__uiPosition"].setValue( imath.V2f( -12.3499985, 15.6999998 ) )
__children["VectorToColor"]["__uiPosition"].setValue( imath.V2f( -27.1483383, 15.6999998 ) )
__children["VectorToColor1"]["parameters"]["vec"].setInput( __children["ColorToVector"]["out"]["vec"] )
__children["VectorToColor1"]["__uiPosition"].setValue( imath.V2f( 2.76328278, 15.6999998 ) )
__children["ColorToVector1"]["parameters"]["col"].setValue( imath.V3f( 1, 2, 3 ) )
__children["ColorToVector1"]["__uiPosition"].setValue( imath.V2f( -12.3999968, 25.2999973 ) )
__children["ColorToFloat"]["parameters"]["c"].setInput( __children["ColorToVector"]["out"]["vec"] )
__children["ColorToFloat"]["__uiPosition"].setValue( imath.V2f( 2.02451324, 6.95000029 ) )
__children["FloatToColor"]["__uiPosition"].setValue( imath.V2f( -27.4850559, 5.31601667 ) )
__children["ColorToVector2"]["parameters"]["col"].setInput( __children["FloatToColor"]["out"]["c"] )
__children["ColorToVector2"]["__uiPosition"].setValue( imath.V2f( -12.8156233, 5.31601667 ) )


del __children
